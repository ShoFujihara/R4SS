# データの読み込み


データの読み込みを行う際に`readr`と`haven`パッケージを用いる．
`readr`パッケージのかわりに`tidyverse`パッケージを呼び出してもよい．

```{r}
# パッケージの呼び出し
pacman::p_load(
  here,
  readr,   # csvファイルを読み込む．tidyverseとしてもよい．
  haven   # sav, dta, sasファイルなどを読み込む．
  )
```

## 使用するデータ

東京大学社会科学研究所附属社会調査・データアーカイブ研究センター（the Center for Social Research and Data Archives: CSRDA）で公開されている「東大社研・若年パネル調査（JLPS-Y）wave1，2007（非制限公開疑似データ）」（調査番号：u001，寄託者：東京大学社会科学研究所パネル調査プロジェクト）を用いる．

[https://csrda.iss.u-tokyo.ac.jp/infrastructure/urd/
](https://csrda.iss.u-tokyo.ac.jp/infrastructure/urd/)


## データの保存先


- `R4SS`：作業ディレクトリ
    - `data`：データを保存するフォルダ
        - `processed`：加工したデータを保存するフォルダ
        - `raw`：加工前の生データを保存するフォルダ
           - `u001_readme.docx`
           - `u001.csv`：csv形式のデータ
           - `u001.dta`：dta形式のデータ（Stata）
           - `u001.sav`：sav形式のデータ（SPSS）
           - `u001c.pdf`：調査票
    - `scripts`：Rスクリプトを保存するフォルダ
    
MACの画面だと @fig-folders のようになる．Rの基礎で`here()`関数と`dir_create()`関数を組み合わせて作成している．ここの`raw`というフォルダに`u001.zip`を展開した**中身**を保存する．`u001`というフォルダは使用しない（使用してもよいがファイルの場所を間違えないようにすること．本資料では，rawのすぐ下にデータがあるように設定している）．


![RStudioの画面](figures/folders.png){#fig-folders}


## Import Datasetからデータを読み込む

`here`をつかったり，ファイルのパスを書くことに慣れないうちは，自分でファイルを探して指定する方法が確実かもしれない．
まず`csv`の場合は，「File」$\rightarrow$「Import Dataset」$\rightarrow$「From text (base)...」か「File」$\rightarrow$「Import Dataset」$\rightarrow$「From text (readr)...」を使用する．

### From text (base)...の場合

`u001.csv`を指定し「Open」を選択すると， @fig-readcsv のような画面が現れる．「Heading」は「Yes」とする．

![From text (base)...の場合](figures/readcsv.png){#fig-readcsv}

右下の「Data Frame」に正しくデータが表示されているようであれば，「Import」を選択する．
するとデータがソース画面に表示される．うまく読み込まれていそうであればデータは閉じてしまおう．
コンソールには読み込みに用いたコードが残されているので，これをコピーしておこう．

```{r}
#| eval: false
u001 <- read.csv("~/GitHub/R4SS/data/raw/u001.csv")
```



### From text (readr)...の場合

右端の「Browse」から`u001.csv`を指定し「Open」を選択すると， @fig-read_csv のような画面が現れる．

![From text (readr)...の場合](figures/read_csv.png){#fig-read_csv}

そのまま「Import」を選択すればよい．ここでもデータがソースの別のタブで開かれるが，不要なので確認したら閉じてしまおう．コンソールには次のプログラムが残っているので，スクリプトにコピーしておこう．

```{r}
library(readr)
u001 <- read_csv("data/raw/u001.csv")
```

なおデフォルトではデータを代入するオブジェクトの名前は`u001`となっているが，コピーしたら`d`など適当な分かりやすい名前に変更するとよい．

## csvの場合

では直接パスを書き，データを読み込んでみる．


## read.csv

```{r}
# read.csvでcsvデータを読み込む
d_csv_1 <- read.csv("data/raw/u001.csv")
# 確認
head(d_csv_1)
# データのクラス
class(d_csv_1)
```

`here`を使用すれば次のように書ける．

```{r}
d_csv_1 <- read.csv(here("data","raw","u001.csv"))
```

### read_csv

```{r}
# read_csvでcsvデータを読み込む
d_csv_2 <- read_csv("data/raw/u001.csv")
# 確認
head(d_csv_2)
# データのクラス
class(d_csv_2)
```

`here`を使用すれば次のように書ける．

```{r}
d_csv_2 <- read_csv(here("data","raw","u001.csv"))
```

## dta (Stata) の場合

```{r}
# read_dtaでdtaデータを読み込む
d_dta <- read_dta("data/raw/u001.dta")
# 確認
head(d_dta)
# データのクラス
class(d_dta)
```

Stataのファイルに含まれているラベルの情報も読み込まれる．`here`を使用すれば次のように書ける．

```{r}
d_dta <- read_dta(here("data","raw","u001.dta"))
```




## sav (SPSS) の場合

```{r}
# read_savでsavデータを読み込む
d_sav <- read_sav("data/raw/u001.sav")
# 確認
head(d_sav)
# データのクラス
class(d_sav)
```


Stataと同様にSPSSのファイルに含まれているラベルの情報も読み込まれる．
`here`を使用すれば次のように書ける．

```{r}
d_sav <- read_sav(here("data","raw","u001.sav"))
```



## ラベルを取り除きたい

ラベルを取り除きたい場合は，`zap_label()`関数や`zap_labels()`関数を用いる．

- `zap_label()`：変数ラベルを取り除く
- `zap_labels()`：値ラベルを取り除く

以下では，`d_sav`に`zap_label()`関数と`zap_labels()`関数を適用し，変数ラベルと値ラベルを取り除き，`d_sav_nolab`という新しいオブジェクトとして保存している．

```{r}
d_sav_nolab <- d_sav |> zap_label() |> zap_labels()
d_sav_nolab
```



## ラベルを加工したい

`labelled`パッケージを用いる．

```{r}
library(labelled)
```


### 変数ラベルの加工

```{r}
# すべての変数ラベルを確認
var_label(d_sav)
var_label(d_sav$sex)

# 変数のラベルにアクセスして修正
var_label(d_sav$sex) <- "問1(1)_性別（Male = 男性, Female = 女性）"
var_label(d_sav$sex)
str(d_sav$sex)
```

### 値ラベルの加工
```{r}
# すべての値ラベルを確認
d_sav |> val_labels()

# sexのラベルを確認
d_sav$sex |> val_labels()

# 変数のラベルにアクセスして修正
val_label(d_sav$sex, 1) <- "Male"
val_label(d_sav$sex, 2) <- "Female"

# 修正後
d_sav$sex |> val_labels()
d_sav |> count(sex)
str(d_sav$sex)
```


## ロングデータの作成

パネルデータで分析を行う場合に，ロング形式のデータにしたほうがよい．
`pivot_longer`を使えば簡単にロング形式のデータが作成できる．

https://r4ds.hadley.nz/data-tidy.html#sec-pivoting を参照．

まずはidと必要な変数`zq1`，`zq5`，`aq1`，`aq5`を準備する．
`transmute`で必要があれば変換して，新たな名前を与える．この時`変数名__年`のようにする．`_`でもよいが，その場合は他の変数に`_`が含まれていないことを確認する．

```{r}
library(tidyverse)
d_wide <- tibble(
  id = 1:10,
  zq1 = rnorm(10),
  zq5 = rbinom(10, size = 1, prob = .5),
  aq1 = rnorm(10),
  aq5 = rbinom(10, size = 1, prob = .5)
)
d_wide

d_long <- d_wide |> 
  transmute(id,
            y__2007 = zq1,
            x__2007 = zq5,
            y__2008 = aq1,
            x__2008 = aq5) |> 
  pivot_longer(
    cols = y__2007:x__2008, 
    names_to = c(".value", "year"), 
    names_sep = "__", 
    values_drop_na = TRUE
  ) |> 
  mutate(year = parse_number(year))
d_long
```


次のように`separate()`関数を用いることもできる．

```{r}
d_wide |> 
  transmute(id,
            y__2007 = zq1,
            x__2007 = zq5,
            y__2008 = aq1,
            x__2008 = aq5) |> 
  pivot_longer(cols = y__2007:x__2008) |> 
  separate(name, into = c("var", "year")) |> 
  pivot_wider(id_cols = c(id, year), 
              names_from = var, 
              values_from = value) |> 
  mutate(year = parse_number(year))
```


なお，パネル固定効果モデルは`plm`パッケージの`plm`，`estimatr`パッケージの`lm_robust`，`fixest`パッケージの`feols`で実行できる．`feols`であると早く推定ができる．




