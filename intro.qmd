# Rの基礎


## RStudioの起動とpaneの設定

まずはRStudio（あるいはRStudio Cloud）を起動すると @fig-RStudio のような画面が表示される． 


![RStudioの画面](figures/RStudio.png){#fig-RStudio}


画面には次の4つの領域（pane）がある．

-   左上：Source pane．ここでスクリプト等を表示・編集する．ここにコードを入力する．
-   左下：Console pane．Consoleの他，Terminal, Background Jobsのタブがある．コンソールには結果が表示される．
-   右上：Environment pane．Environmentでは作成されたオブジェクトを確認できる．History，Connection，Built，Git，Tutorialなどのタブもある．
-   右下：Output pane．ここにはファイル，図，パッケージ，ヘルプなどが表示される．

paneについては一時的に縮小や拡大が可能であり，@fig-pane の赤で囲まれた枠でpaneの設定ができる．左上のEdit $\rightarrow$ Preferences... $\rightarrow$ Pane Layoutでも細かな設定が可能である．筆者は赤で囲まれた枠から「Console on Right」を選択し，右上にConsole paneが表示されるように設定している．


![赤で囲まれた枠でPaneの設定](figures/pane.png){#fig-pane}


## Rによる計算

コンソール上に @fig-pane のような四則演算を直接入力する．

![コンソールに直接入力する](figures/ex_1_1.png){#fig-pane}



するとすぐ下に結果が表示されるはずである．

簡単な計算はコンソール上で行ってもよいだろう．


::: {.callout-tip}
## `[1]`は何？
結果の左には常に`[1]`が表示されて気になるかもしれない．これは結果をベクトル（数字の列）で表示した時に，画面の一番左にある数字が何番目の要素であるかを示すものである．結果が1つしかない場合は，かならず1つ目の要素となるため`[1]`が表示される．
:::

::: {.callout-tip}
## ESCを使う

計算の途中で改行すると @fig-esc のようになる．
この場合ESCキーを押すことで`>`の状態に戻すことができる．
何かのミスで結果が表示されない場合などは，ESCで元の状態に戻して再度コードを検討する．

![計算の途中で改行した結果](figures/esc.png){#fig-esc}
:::



次は，@fig-script の赤い四角の部分からソースにRスクリプトを作成する．

![ここからスクリプトを開く](figures/script.png){#fig-script}

そして，Rスクリプト上に以下のコードを入力する．`#`（ハッシュ）はメモを作成するための記号であり，同じ行で`#`の後にくるものは実行されない．これをコメントアウトと呼ぶ．

```{r}
#| eval: false
# 足し算
1 + 1
# 引き算
2 - 100
# 掛け算
7 * 8
# 割り算
123456 / 3
# 累乗
2^3
```


ソースのタブでは，スクリプトは保存されていない状態だと`Untitled1*`のように表示されている．入力が終了したら名前をつけて保存する．ファイル名は`demo_1.R`のように拡張子`.R`をつける．

保存したら，タブのすぐ下の欄にある「Source」のすぐ右から「Source with Echo」を選択するか（Rスクリプトすべてを実行），実行したい行か範囲を選択して「Run」を選択すれば（選択した範囲を実行），コンソール上に次のような結果が表示される．一度「Source with Echo」を選択すれば，後は「Source」を選択すれば，すべてのRスクリプト上のすべてのコードが実行される．

Rスクリプトのいち部を実行したい場合は，「Ctrl」+「Enter」（「command + Enter」）でカーソルの置かれている行を実行（わざわざコードを全部選択する必要はない）．同様の方法ですべてのコードを実行したい場合は，「Ctrl」+「A」+「Enter」（「command」+「A」+「Enter」）とすればよい．


```{r}
# 足し算
1 + 1
# 引き算
2 - 100
# 掛け算
7 * 8
# 割り算
123456 / 3
# 累乗
2^3
```


コンソールに入力すると記録には残らないので，Rスクリプトに入力しそれを実行するようにする．実際のところ分析の結果自体は保存して記録に残す必要はないといってもよい．分析のプロセスがRスクリプトに残っていれば，結果を何度でも再現できる．



::: {.callout-tip}
## `#`（ハッシュ）の使い方
`#`でコメントをマメに残す癖をつけておこう．コードを書いているときは理解できていても，時間が空くと何をやっているかを忘れてしまうことがよくある．すぐに作業を開始するためにもメモは残しておこう．また，他人にコードをチェックしてもらう際にもメモは重要である．
```{r}
# 足し算
1 + 2
1 + 2   # 足し算

# --------------------------
# 2023年5月9日
# --------------------------
# Rの基礎

# 足し算
1 + 2
```
:::



では今度は関数（function）を使用してみる．関数は`関数名()`といった形となり，`()`の中に引数（argument）を指定する．引数は数値であったり，ベクトルであったり，データであったり，`TRUE`や`FALSE`やであったり，`NULL`であったり，文字であったりする．

```{r}
# 平方根
sqrt(8)
# 底が2の対数
log2(8)
# 底が2の対数 log()関数の引数にbase = 2 を加える
log(8, base = 2)
# 自然対数 log関数のデフォルトのbase = exp(1)
log(8)
# 指数関数
exp(8)
```

::: {.callout-tip}
## 引数の指定
`sqrt(x = 8)`のようにするのが正しいのかもしれないが，第1引数については`sqrt(8)`と省略されることが多い．`log(8, base = 2)`は`log(8, 2)`としてもよいが，分かりにくいかもしれない．
:::


::: {.callout-tip}
## 数学の復習
累乗 ($a^x$)，平方根 ($\sqrt{x}$)，自然対数 ($\log_e x$)，指数関数($e^x$)，$e$はネイピア数であり， $e=2.718...$．
:::

## ベクトル

社会調査データの分析では，人々によって異なる変数の分布（たとえば中心的な傾向やばらつきの程度）や変数間の関連を分析する．その時，変数は数値の列（ベクトル）として管理され，これを引数として関数で処理を行う．複数の数値を並べるためには`c`（combineの略）を用い，カンマ`,`でつなぐ．

次のような4つのケースのある変数を考える．

$$\{1,2,2,3\}$$

Rでは次のように示される．

```{r}
# ベクトル
c(1,2,2,3)
```


次のような変数の値は実際の調査で得られることはないが，IDとして使用できるだろう．

$$\{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\}$$

```{r}
# 連続した値
1:18
```


以下のような規則的な数字の列であった場合は，様々な関数を使用できる．

$$\{0,2,4,6,8,10\}$$

```{r}
# 等差数列
seq(0,10,2) # 0から10まで2つずつ増加
```


$$\{1,1,1,1,1,1,1,1,1,1\}$$

```{r}
# 繰り返し
rep(1,10) # 1を10個
```


::: {.callout-tip}
## 関数のヘルプ
関数名は分かるがどのように引数を指定してよいかわからない場合やさらに何ができるのかを確認したい場合は，ヘルプを見てみよう．
例えば平均の`mean()`関数であれば`?mean`とする．また`%in%`のように特殊な表記については`?"%in%"`のように`"`で囲んだ上で`?`をつける．`[]`について調べたければ`?"["`のようにする．`"`は`` ` ``でもよい．つまり，`` ?`[` ``としてもよい．

単語をもとになにか調べたければ`help.search("mean")`のようにする．
他にもRjpWiki，個人のサイトなど，日本語や英語で検索すると多くヒットする．教科書の索引で調べるのもよいだろう．
:::




## オブジェクト

値，データ，ベクトル，コメントなど様々なものをオブジェクトに代入できる．次のように`a`というオブジェクトに`4`という値を代入してみる．

```{r}
# aというオブジェクトに4を代入
a <- 4
```

代入するだけでは何もでてこないので，`a`と入力して実行してみる．


```{r}
# 結果を表示
a
```

すると先程代入された値が表示される．

では次に$\{1,2,3,4,5,5\}$というベクトルを代入してみる．

```{r}
# bというオブジェクトに [1,2,3,4,5,5] というベクトルを代入
b <- c(1,2,3,4,5,5)
# 結果を表示
b
```

なお`c`，`q`，`t`は関数として，`pi`ははじめから組み込まれている定数として頻繁に使用されるためオブジェクトとしては使用しない．`TRUE`と`FALSE`の省略である`T`と`F`も使用しないほうがよいだろう．`C`，`D`，`I`も避けよう．

```{r}
# piは3.141593
pi
```


::: {.callout-tip}
## <- と =
代入する際に`<-`のかわりに`=`を使用することもできる．しかしRでは代入には`<-`，関数の引数の指定には`=`を一般に使用する．

```{r}
# aというオブジェクトに4を代入
a <- 4   # 代入には`<-`を使用する． 
a
a = 4   # 代入には`=`を使用しない． 
a
# 
dnorm(x = 1)  # 引数の指定には`=`を使用する
dnorm(x <- 1)  # 引数の指定には`<-`を使用しない
```
:::


このようなベクトルをオブジェクトとし，それに対して関数を適用する．

## Rによる変数の処理

平均50，標準偏差10の正規分布からランダムに100個のデータを取り出し，架空のデータを作成する．
データは`rnorm()`関数に`n = 100`，`mean = 50`，`sd = 10`を指定することで作成できる．
そのデータについては`x`というオブジェクトに代入しておく．

```{r}
# 平均50，標準偏差10の正規分布からランダムに100個のデータを取り出す
# 再現のため乱数を指定
set.seed(123456)
x <- rnorm(n = 100, mean = 50, sd = 10)
x
```

図も関数を用いることで描くことができる．`hist()`関数はヒストグラムを作成する．

```{r}
# ヒストグラム
hist(x)
```

次のように様々な関数を利用して，値を計算してみる．

$$
\sum_{i=1}^n x.
$$

```{r}
# 総和
sum(x)
```

$$
\bar x = \frac{1}{n}\sum_{i=1}^n x.
$$

```{r}
# 平均値
mean(x)
```

値を丸めたければ`round()`関数を使用する．小数点以下の桁数は`digits`で指定できる．まず，平均値を求め`mean_x`というオブジェクトに代入する．それに`round()`関数を適用する．

```{r}
# 平均値を求めmean_xというオブジェクトに代入する
mean_x <- mean(x)
# mean_xというオブジェクトに対してround()関数を適用する．
round(mean_x, digits = 1)
```

`mean_x`を使用せず，次のようにしてもよい．

```{r}
# まとめて実行する
round(mean(x), digits = 1)
```

ただし計算のプロセスが見えにくいかもしれないので，後に説明するパイプ演算子を利用することが推奨される．

- 中央値

```{r}
# 中央値
median(x)
```

- 不偏分散

$$
\frac{1}{n-1}\sum_{i=1}^n \left(x - \bar x \right).
$$

```{r}
# 不偏分散
var(x)
```


- 標準偏差

$$
\sqrt{\frac{1}{n-1}\sum_{i=1}^n \left(x - \bar x \right)}.
$$

```{r}
# 標準偏差
sd(x)
```

- 最大値と最小値

```{r}
# 最大値
max(x)
# 最小値
min(x)
```

- サンプルサイズ

```{r}
# 大きさ
length(x)
```

::: {.callout-warning}
## length()関数についての注意点
欠損値がある場合には，観察されたケースのサイズを`length()`関数を用いて示してはいけない．もし欠損値のないケースのサイズについて知りたければ`sum(!is.na(x))`とする．使用頻度が多い場合には，次のように`complete_obs()`関数を作成するのがよい．

```{r}
# xをコピー
x_mis <- x
# 10から20番目の要素をNAとする
x_mis[10:20] <- NA
# 欠損を含むデータの表示
x_mis
# 欠損値を含むサイズ
length(x_mis)
# 欠損値を除いたサイズ
sum(!is.na(x_mis))
# 欠損値をた観察ケースサイズを求める関数を作成する
complete_obs <- function(x) sum(!is.na(x))
complete_obs(x)
```

`length()`関数を使用する際は注意しよう．データフレームの行のサイズを`nrow()`関数で求め，それをサンプルサイズとして用いることもあるが，これも欠損値については考慮していないことに注意が必要である．
:::

- 四分位数

```{r}
# 四分位数
quantile(x)
```


- 要約
`summary()`関数を数値に適用すると，平均と四分位数を同時に示す．

```{r}
# 要約
summary(x)
```


::: {.callout-warning}
## 注意点
`var`と`sd`は $n$ ではなく $n-1$ で割ったものであることに注意．
:::







## パッケージ

Rでは分析などの機能をひとつのパッケージとしてまとめている．RStudioの右下のOutput paneの「Packages」のタブからパッケージはインストール可能である．または`install.packages("パッケージ名")` と入力しても良い．`install.packages("パッケージ名", dependencies = TRUE)`のように`dependencies = TRUE`はつけておいたほうがよい．


```{r}
#| eval = FALSE
# 以下をコンソールに貼り付ければ，インストールされる（ただし時間がかかる）
install.packages("tidyverse", dependencies = TRUE)  # データの整理
install.packages("haven", dependencies = TRUE)  # データの読み込み
install.packages("janitor", dependencies = TRUE)  # データの変換
install.packages("here", dependencies = TRUE)   # プロジェクト内のファイルを表示
install.packages("fs", dependencies = TRUE)  # フォルダの作成
```

これまでの作業はインストールだけであり，そのままではパッケージの関数などは利用できない．パッケージを使用したい場合は`library(パッケージ名)`で呼び出す必要がある．これはRStudioを閉じて再度立ち上げたら必要な作業なので，スクリプトに書いておく．

```{r}
library(tidyverse)  # データの整理
library(haven)  # データの読み込み
library(janitor)  # 度数分布表
library(here)  # プロジェクト内のファイルを表示
library(fs)  # ファイルの作成
```

なおインストールされているパッケージについてはOutput paneの「Packages」のタブか
`.packages(all.available=TRUE)`と入力することで確認できる．


以上の作業をまとめて行いたい場合，`pacman`パッケージの`p_load()`関数を用いる．

```{r}
# pacmanパッケージがインストールされていない場合は以下からインストールを実行
#install.packages("pacman")
# パッケージのインストール（もしインストールされていなければ）と呼び出し
pacman::p_load(tidyverse,
               haven,
               janitor)
```




::: {.callout-warning}
## パッケージ名::関数名
複数のパッケージで同じ関数名を使用することがある．そのため，意図しているパッケージの関数とは異なるを用いてしまったり，
:::



## パイプ演算子

通常は`関数(引数)`として入力されるが，パイプ処理では`引数 |> 関数()`のようにパイプの左側の結果をパイプ右側に配置した関数の最初の引数（第1引数）に適用できる．
更に`|>`を複数つなげて`データ |> 関数() |> 関数()` のようにできるため，どのような処理を行ったかが分かりやすい形でコードが整理される．

```{r}
# 総和
x |> sum()
# 平均値
x |> mean()
# 平均値を丸める
x |> mean() |> round(digits = 1)
# 中央値
x |> median()
# 不偏分散
x |> var()
# 標準偏差
x |> sd()
# 最大値
x |> max()
# 最小値
x |> min()
# 大きさ
x |> length()
# 四分位数
x |> quantile()
# 要約
x |> summary()
```




::: {.callout-tip}
## 2つのパイプ演算子
パイプ演算子はもともと`magrittr`パッケージの`%>%`という演算子のことを示していた．しかし，R4.1+では`|>`が標準で組み込まれている（ネイティブパイプと呼ばれる）．したがって`|>`を使用するのに`magrittr`パッケージを呼び出す必要はない．実際は`%>%`のほうが分かりやすく，使用しやすい場面もある．なお，パイプ演算子のショートカットキーは $\uparrow$ +「Command」+「m」である．

```{r}
library(magrittr)
x %>% mean()
x |> mean()
```
:::




## 作業ディレクトリを作成する

データ，スクリプト，作成した図表，先行研究，資料，執筆した論文などをひとつのフォルダの中にまとめておこう．このようなあるプロジェクトに関連するファイルが含まれたフォルダを作業ディレクトリ（Working Directory）と呼ぶ．例えばここでは`R4SS`という名前のフォルダを作成する．中身はひとまずはからのままでもよい．

`R4SS`というフォルダを作成しても，Rには`R4SS`フォルダは作業ディレクトリとしては認識していない．

「Session」$\rightarrow$「Set Working Directory」$\rightarrow$「Choose Directory...」を選択し，`R4SS`フォルダを探して選択し，「Open」を選択することによって，
`R4SS`が作業ディレクトリとしては認識される．


![作業ディレクトリの変更方法](figures/set_working_directory.png)

以下のコードを入力し，指定したフォルダが作業ディレクトリとして認識されているかどうかを確認してみよう．

![作業ディレクトリの確認方法](figures/working_directory.png)


```{r}
getwd()
```

基本的にはRStudioを起動するたびに作業ディレクトリを指定する必要がある．
しかし，以下で説明するプロジェクトを指定する作業を一度行ってしまえば，その作業の必要はない．


## プロジェクトの作成

@fig-project のように左上のアイコンからプロジェクトを作成しよう．すでに`R4SS`という名前のフォルダを作成されているという前提で手順を説明する．


![プロジェクトを作成する](figures/project.png){#fig-project}


@fig-project_select のように，新規でディレクトリ（New Directory）を作成するのか，すでにあるディレクトリ（Existing Directory）を使うのかをたずねられるので，ここではすでにあるディレクトリを使用する．「Browse」を選択し，作業ディレクトリを選択したら「Open」を選択する．「Projecto working directory:」の欄にパスが記入された状態になるので，「Create Project」を選択する．

![新規にフォルダを作成するか既存のフォルダを利用するのかを選択する](figures/project_select.png){#fig-project_select}


すると，`R4SS`というフォルダの中に`R4SS.Rproj`というファイルが作成される．このように，プロジェクトファイル（`R4SS.Rproj`のように`.Rproj`という拡張子のファイル）を作業ディレクトリに作成しておけば，`.Rproj`ファイルをクリックすると自動的にファイルのある場所が作業ディレクトリとして指定される．確認の方法は複数ある．

1. Consoleペインのタブのすぐ下に作業ディレクトリが表示されているか．
2. Filesペインの右側のプロジェクトのアイコンをクリックすると作業ディレクトリの中身がFilesの中に表示されているか．
3. `getwd()`関数を実行する．
4. `here`パッケージの`here()`関数を用いる．

```{r}
# 作業ディレクトリの確認
getwd()
```

`here`パッケージの`here()`関数を用いる．

```{r}
# 作業ディレクトリの確認
here()
```


## フォルダの整理

`dir_create()`関数でファイルを作成する．ファイルの作成場所に`here()`とすれば作業ディレクトリにファイルが作成されるので，`here(c("フォルダ1", "フォルダ2",...))`のようにすれば，作業ディレクトリにフォルダ1，フォルダ2，．．．のようにファイルが作成される．

次のコードによって，作業ディレクトリに`scripts`，`figures`，`tables`，`documents`，`manuscripts`というフォルダを作成する．

```{r}
dir_create(here(c("scripts",           # Rスクリプトを保存
                  "figures",           # 図を保存
                  "tables",           # 表を保存
                  "documents",        # 先行研究や資料を保存するフォルダ
                  "manuscripts"      # 原稿を保存
                  )))
```

`data`というフォルダには未加工のデータを保存するフォルダ`raw`と処理済みのデータを保存するフォルダ`processed`の2つを準備したい．`here()`関数の第1引数を`"data"`とし第2引数を`"raw"`として，`dir_create()`関数を適用する．

順番に確認していこう．作業ディレクトリの`data`というフォルダの`raw`というフォルダは`here("data", "raw")`で，作業ディレクトリの`data`というフォルダの`processed`というフォルダは`here("data", "processed")`で指定できる．

```{r}
here("data", "raw")
here("data", "processed")
```

これはパスを書いただけなので，`dir_create()`関数でフォルダを作成する．

```{r}
dir_create(here("data", "raw"))        # データを保存（生データ）
dir_create(here("data", "processed"))  # データを保存（処理したデータ）
```


次のようなフォルダが作成されていれば作業完了である．

- `R4SS`：作業ディレクトリ
    - `data`：データを保存するフォルダ
        - `processed`：加工したデータを保存するフォルダ
        - `raw`：加工前の生データを保存するフォルダ
    - `scripts`：Rスクリプトを保存するフォルダ
    - `figures`：図を保存するフォルダ
    - `tables`：表を保存するフォルダ
    - `documents`：先行研究や資料を保存するフォルダ
    - `manuscripts`：原稿を保存するフォルダ

先程保存したRスクリプトは`scripts`フォルダ内に移動しておこう．


## ファイルの場所を表示する

`u001.csv`の場所は，`../R4SS/data/u001.csv`のようになっている．
`here()`をつかって表示してみよう．

```{r}
# u001.csvの場所の表示
here("data", "raw", "u001.csv")
```




## Rの終了

Rスクリプトを保存して終了すればよい．個人的には作業スペースの保存は必要ないと考えるので，Save Workspace...などとたずねられても，Noとする．@fig-save_option で，「Restore .RData into workspace at startup」のチェックは外し，「Save Workspace to .RDta on exit:」も「Never」としておこう．

![保存についてのオプション](figures/save_option.png){#fig-save_option}


