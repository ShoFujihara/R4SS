{
  "hash": "f3ae7cff5ad67242af5d33519e6764aa",
  "result": {
    "markdown": "# Rの基礎\n\n\n## RStudioの起動とpaneの設定\n\nまずはRStudio（あるいはRStudio Cloud）を起動すると @fig-RStudio のような画面が表示される． \n\n\n![RStudioの画面](figures/RStudio.png){#fig-RStudio}\n\n\n画面には次の4つの領域（pane）がある．\n\n-   左上：Source pane．ここでスクリプト等を表示・編集する．ここにコードを入力する．\n-   左下：Console pane．Consoleの他，Terminal, Background Jobsのタブがある．コンソールには結果が表示される．\n-   右上：Environment pane．Environmentでは作成されたオブジェクトを確認できる．History，Connection，Built，Git，Tutorialなどのタブもある．\n-   右下：Output pane．ここにはファイル，図，パッケージ，ヘルプなどが表示される．\n\npaneについては一時的に縮小や拡大が可能であり，@fig-pane の赤で囲まれた枠でpaneの設定ができる．左上のEdit $\\rightarrow$ Preferences... $\\rightarrow$ Pane Layoutでも細かな設定が可能である．筆者は赤で囲まれた枠から「Console on Right」を選択し，右上にConsole paneが表示されるように設定している．\n\n\n![赤で囲まれた枠でPaneの設定](figures/pane.png){#fig-pane}\n\n\n## Rによる計算\n\nコンソール上に @fig-pane のような四則演算を直接入力する．\n\n![コンソールに直接入力する](figures/ex_1_1.png){#fig-pane}\n\n\n\nするとすぐ下に結果が表示されるはずである．\n\n簡単な計算はコンソール上で行ってもよいだろう．\n\n\n::: {.callout-tip}\n## `[1]`は何？\n結果の左には常に`[1]`が表示されて気になるかもしれない．これは結果をベクトル（数字の列）で表示した時に，画面の一番左にある数字が何番目の要素であるかを示すものである．結果が1つしかない場合は，かならず1つ目の要素となるため`[1]`が表示される．\n:::\n\n::: {.callout-tip}\n## ESCを使う\n\n計算の途中で改行すると @fig-esc のようになる．\nこの場合ESCキーを押すことで`>`の状態に戻すことができる．\n何かのミスで結果が表示されない場合などは，ESCで元の状態に戻して再度コードを検討する．\n\n![計算の途中で改行した結果](figures/esc.png){#fig-esc}\n:::\n\n\n\n次は，@fig-script の赤い四角の部分からソースにRスクリプトを作成する．\n\n![ここからスクリプトを開く](figures/script.png){#fig-script}\n\nそして，Rスクリプト上に以下のコードを入力する．`#`（ハッシュ）はメモを作成するための記号であり，同じ行で`#`の後にくるものは実行されない．これをコメントアウトと呼ぶ．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 足し算\n1 + 1\n# 引き算\n2 - 100\n# 掛け算\n7 * 8\n# 割り算\n123456 / 3\n# 累乗\n2^3\n```\n:::\n\n\n\n\nソースのタブでは，スクリプトは保存されていない状態だと`Untitled1*`のように表示されている．入力が終了したら名前をつけて保存する．ファイル名は`demo_1.R`のように拡張子`.R`をつける．\n\n保存したら，タブのすぐ下の欄にある「Source」のすぐ右から「Source with Echo」を選択するか（Rスクリプトすべてを実行），実行したい行か範囲を選択して「Run」を選択すれば（選択した範囲を実行），コンソール上に次のような結果が表示される．一度「Source with Echo」を選択すれば，後は「Source」を選択すれば，すべてのRスクリプト上のすべてのコードが実行される．\n\nRスクリプトのいち部を実行したい場合は，「Ctrl」+「Enter」（「command + Enter」）でカーソルの置かれている行を実行（わざわざコードを全部選択する必要はない）．同様の方法ですべてのコードを実行したい場合は，「Ctrl」+「A」+「Enter」（「command」+「A」+「Enter」）とすればよい．\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 足し算\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n# 引き算\n2 - 100\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -98\n```\n:::\n\n```{.r .cell-code}\n# 掛け算\n7 * 8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 56\n```\n:::\n\n```{.r .cell-code}\n# 割り算\n123456 / 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 41152\n```\n:::\n\n```{.r .cell-code}\n# 累乗\n2^3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\n\n\nコンソールに入力すると記録には残らないので，Rスクリプトに入力しそれを実行するようにする．実際のところ分析の結果自体は保存して記録に残す必要はないといってもよい．分析のプロセスがRスクリプトに残っていれば，結果を何度でも再現できる．\n\n\n\n::: {.callout-tip}\n## `#`（ハッシュ）の使い方\n`#`でコメントをマメに残す癖をつけておこう．コードを書いているときは理解できていても，時間が空くと何をやっているかを忘れてしまうことがよくある．すぐに作業を開始するためにもメモは残しておこう．また，他人にコードをチェックしてもらう際にもメモは重要である．\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 足し算\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n1 + 2   # 足し算\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n# --------------------------\n# 2023年5月9日\n# --------------------------\n# Rの基礎\n\n# 足し算\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n:::\n\n\n\nでは今度は関数（function）を使用してみる．関数は`関数名()`といった形となり，`()`の中に引数（argument）を指定する．引数は数値であったり，ベクトルであったり，データであったり，`TRUE`や`FALSE`やであったり，`NULL`であったり，文字であったりする．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 平方根\nsqrt(8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.828427\n```\n:::\n\n```{.r .cell-code}\n# 底が2の対数\nlog2(8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n# 底が2の対数 log()関数の引数にbase = 2 を加える\nlog(8, base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n# 自然対数 log関数のデフォルトのbase = exp(1)\nlog(8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.079442\n```\n:::\n\n```{.r .cell-code}\n# 指数関数\nexp(8)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2980.958\n```\n:::\n:::\n\n\n\n::: {.callout-tip}\n## 引数の指定\n`sqrt(x = 8)`のようにするのが正しいのかもしれないが，第1引数については`sqrt(8)`と省略されることが多い．`log(8, base = 2)`は`log(8, 2)`としてもよいが，分かりにくいかもしれない．\n:::\n\n\n::: {.callout-tip}\n## 数学の復習\n累乗 ($a^x$)，平方根 ($\\sqrt{x}$)，自然対数 ($\\log_e x$)，指数関数($e^x$)，$e$はネイピア数であり， $e=2.718...$．\n:::\n\n## ベクトル\n\n社会調査データの分析では，人々によって異なる変数の分布（たとえば中心的な傾向やばらつきの程度）や変数間の関連を分析する．その時，変数は数値の列（ベクトル）として管理され，これを引数として関数で処理を行う．複数の数値を並べるためには`c`（combineの略）を用い，カンマ`,`でつなぐ．\n\n次のような4つのケースのある変数を考える．\n\n$$\\{1,2,2,3\\}$$\n\nRでは次のように示される．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ベクトル\nc(1,2,2,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 2 3\n```\n:::\n:::\n\n\n\n\n次のような変数の値は実際の調査で得られることはないが，IDとして使用できるだろう．\n\n$$\\{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\\}$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 連続した値\n1:18\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18\n```\n:::\n:::\n\n\n\n\n以下のような規則的な数字の列であった場合は，様々な関数を使用できる．\n\n$$\\{0,2,4,6,8,10\\}$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 等差数列\nseq(0,10,2) # 0から10まで2つずつ増加\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  0  2  4  6  8 10\n```\n:::\n:::\n\n\n\n\n$$\\{1,1,1,1,1,1,1,1,1,1\\}$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 繰り返し\nrep(1,10) # 1を10個\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 1 1 1 1 1 1\n```\n:::\n:::\n\n\n\n\n::: {.callout-tip}\n## 関数のヘルプ\n関数名は分かるがどのように引数を指定してよいかわからない場合やさらに何ができるのかを確認したい場合は，ヘルプを見てみよう．\n例えば平均の`mean()`関数であれば`?mean`とする．また`%in%`のように特殊な表記については`?\"%in%\"`のように`\"`で囲んだ上で`?`をつける．`[]`について調べたければ`?\"[\"`のようにする．`\"`は`` ` ``でもよい．つまり，`` ?`[` ``としてもよい．\n\n単語をもとになにか調べたければ`help.search(\"mean\")`のようにする．\n他にもRjpWiki，個人のサイトなど，日本語や英語で検索すると多くヒットする．教科書の索引で調べるのもよいだろう．\n:::\n\n\n\n\n## オブジェクト\n\n値，データ，ベクトル，コメントなど様々なものをオブジェクトに代入できる．次のように`a`というオブジェクトに`4`という値を代入してみる．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# aというオブジェクトに4を代入\na <- 4\n```\n:::\n\n\n\n代入するだけでは何もでてこないので，`a`と入力して実行してみる．\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 結果を表示\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n\nすると先程代入された値が表示される．\n\nでは次に$\\{1,2,3,4,5,5\\}$というベクトルを代入してみる．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bというオブジェクトに [1,2,3,4,5,5] というベクトルを代入\nb <- c(1,2,3,4,5,5)\n# 結果を表示\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5 5\n```\n:::\n:::\n\n\n\nなお`c`，`q`，`t`は関数として，`pi`ははじめから組み込まれている定数として頻繁に使用されるためオブジェクトとしては使用しない．`TRUE`と`FALSE`の省略である`T`と`F`も使用しないほうがよいだろう．`C`，`D`，`I`も避けよう．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# piは3.141593\npi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.141593\n```\n:::\n:::\n\n\n\n\n\nこのようなベクトルをオブジェクトとし，それに対して関数を適用する．\n\n## Rによる変数の処理\n\n平均50，標準偏差10の正規分布からランダムに100個のデータを取り出し，架空のデータを作成する．\nデータは`rnorm()`関数に`n = 100`，`mean = 50`，`sd = 10`を指定することで作成できる．\nそのデータについては`x`というオブジェクトに代入しておく．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 平均50，標準偏差10の正規分布からランダムに100個のデータを取り出す\n# 再現のため乱数を指定\nset.seed(123456)\nx <- rnorm(n = 100, mean = 50, sd = 10)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 58.33733 47.23952 46.44998 50.87487 72.52256 58.34460 63.12416 75.02645\n  [9] 61.68232 45.73834 40.03870 38.86050 49.44268 61.74432 60.53219 50.57606\n [17] 42.64957 59.30528 66.68211 55.59688 42.46025 62.56554 50.38493 51.89540\n [25] 54.62595 45.72637 50.16586 57.04879 59.71849 43.79508 41.44133 50.69558\n [33] 39.53802 22.51132 38.70140 41.38315 65.60074 60.15088 60.43994 38.84095\n [41] 39.28696 59.67821 51.71033 41.03750 51.58289 44.98052 40.34077 48.86266\n [49] 60.85950 37.88352 32.32278 45.08308 53.21466 64.60661 65.37243 46.60431\n [57] 39.22551 35.09235 47.47253 48.78077 43.51017 53.13076 51.22811 41.63160\n [65] 56.00422 47.54065 48.15335 50.23157 45.15348 42.62094 63.02508 55.64499\n [73] 31.94956 54.38339 35.58911 59.52829 42.77018 50.48760 34.36468 26.97634\n [81] 61.57964 42.95265 34.26178 55.18352 39.35069 50.47054 58.48047 54.32678\n [89] 55.22805 47.46114 45.03148 62.60101 55.64980 46.55362 57.24810 58.64092\n [97] 53.69247 65.83596 50.60370 51.28711\n```\n:::\n:::\n\n\n\n図も関数を用いることで描くことができる．`hist()`関数はヒストグラムを作成する．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ヒストグラム\nhist(x)\n```\n\n::: {.cell-output-display}\n![](1.intro_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n次のように様々な関数を利用して，値を計算してみる．\n\n$$\n\\sum_{i=1}^n x.\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 総和\nsum(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5016.82\n```\n:::\n:::\n\n\n\n$$\n\\bar x = \\frac{1}{n}\\sum_{i=1}^n x.\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 平均値\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.1682\n```\n:::\n:::\n\n\n\n値を丸めたければ`round()`関数を使用する．小数点以下の桁数は`digits`で指定できる．まず，平均値を求め`mean_x`というオブジェクトに代入する．それに`round()`関数を適用する．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 平均値を求めmean_xというオブジェクトに代入する\nmean_x <- mean(x)\n# mean_xというオブジェクトに対してround()関数を適用する．\nround(mean_x, digits = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.2\n```\n:::\n:::\n\n\n\n`mean_x`を使用せず，次のようにしてもよい．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# まとめて実行する\nround(mean(x), digits = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.2\n```\n:::\n:::\n\n\n\nただし計算のプロセスが見えにくいかもしれないので，後に説明するパイプ演算子を利用することが推奨される．\n\n- 中央値\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 中央値\nmedian(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.47907\n```\n:::\n:::\n\n\n\n- 不偏分散\n\n$$\n\\frac{1}{n-1}\\sum_{i=1}^n \\left(x - \\bar x \\right).\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 不偏分散\nvar(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 98.70409\n```\n:::\n:::\n\n\n\n\n- 標準偏差\n\n$$\n\\sqrt{\\frac{1}{n-1}\\sum_{i=1}^n \\left(x - \\bar x \\right)}.\n$$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 標準偏差\nsd(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.934993\n```\n:::\n:::\n\n\n\n- 最大値と最小値\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 最大値\nmax(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 75.02645\n```\n:::\n\n```{.r .cell-code}\n# 最小値\nmin(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22.51132\n```\n:::\n:::\n\n\n\n- サンプルサイズ\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 大きさ\nlength(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\n\n::: {.callout-warning}\n## length()関数についての注意点\n欠損値がある場合には，観察されたケースのサイズを`length()`関数を用いて示してはいけない．もし欠損値のないケースのサイズについて知りたければ`sum(!is.na(x))`とする．使用頻度が多い場合には，次のように`complete_obs()`関数を作成するのがよい．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# xをコピー\nx_mis <- x\n# 10から20番目の要素をNAとする\nx_mis[10:20] <- NA\n# 欠損を含むデータの表示\nx_mis\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 58.33733 47.23952 46.44998 50.87487 72.52256 58.34460 63.12416 75.02645\n  [9] 61.68232       NA       NA       NA       NA       NA       NA       NA\n [17]       NA       NA       NA       NA 42.46025 62.56554 50.38493 51.89540\n [25] 54.62595 45.72637 50.16586 57.04879 59.71849 43.79508 41.44133 50.69558\n [33] 39.53802 22.51132 38.70140 41.38315 65.60074 60.15088 60.43994 38.84095\n [41] 39.28696 59.67821 51.71033 41.03750 51.58289 44.98052 40.34077 48.86266\n [49] 60.85950 37.88352 32.32278 45.08308 53.21466 64.60661 65.37243 46.60431\n [57] 39.22551 35.09235 47.47253 48.78077 43.51017 53.13076 51.22811 41.63160\n [65] 56.00422 47.54065 48.15335 50.23157 45.15348 42.62094 63.02508 55.64499\n [73] 31.94956 54.38339 35.58911 59.52829 42.77018 50.48760 34.36468 26.97634\n [81] 61.57964 42.95265 34.26178 55.18352 39.35069 50.47054 58.48047 54.32678\n [89] 55.22805 47.46114 45.03148 62.60101 55.64980 46.55362 57.24810 58.64092\n [97] 53.69247 65.83596 50.60370 51.28711\n```\n:::\n\n```{.r .cell-code}\n# 欠損値を含むサイズ\nlength(x_mis)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\n# 欠損値を除いたサイズ\nsum(!is.na(x_mis))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 89\n```\n:::\n\n```{.r .cell-code}\n# 欠損値をた観察ケースサイズを求める関数を作成する\ncomplete_obs <- function(x) sum(!is.na(x))\ncomplete_obs(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n\n\n`length()`関数を使用する際は注意しよう．データフレームの行のサイズを`nrow()`関数で求め，それをサンプルサイズとして用いることもあるが，これも欠損値については考慮していないことに注意が必要である．\n:::\n\n- 四分位数\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 四分位数\nquantile(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      0%      25%      50%      75%     100% \n22.51132 42.74002 50.47907 58.33915 75.02645 \n```\n:::\n:::\n\n\n\n\n- 要約\n`summary()`関数を数値に適用すると，平均と四分位数を同時に示す．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 要約\nsummary(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  22.51   42.74   50.48   50.17   58.34   75.03 \n```\n:::\n:::\n\n\n\n\n::: {.callout-warning}\n## 注意点\n`var`と`sd`は $n$ ではなく $n-1$ で割ったものであることに注意．\n:::\n\n\n\n\n\n\n\n## パッケージ\n\nRでは分析などの機能をひとつのパッケージとしてまとめている．RStudioの右下のOutput paneの「Packages」のタブからパッケージはインストール可能である．または`install.packages(\"パッケージ名\")` と入力しても良い．`install.packages(\"パッケージ名\", dependencies = TRUE)`のように`dependencies = TRUE`はつけておいたほうがよい．\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 以下をコンソールに貼り付ければ，インストールされる（ただし時間がかかる）\ninstall.packages(\"tidyverse\", dependencies = TRUE)  # データの整理\ninstall.packages(\"haven\", dependencies = TRUE)  # データの読み込み\ninstall.packages(\"janitor\", dependencies = TRUE)  # データの変換\n```\n:::\n\n\n\nこれまでの作業はインストールだけであり，そのままではパッケージの関数などは利用できない．パッケージを使用したい場合は`library(パッケージ名)`で呼び出す必要がある．これはRStudioを閉じて再度立ち上げたら必要な作業なので，スクリプトに書いておく．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)  # データの整理\nlibrary(haven)  # データの読み込み\nlibrary(janitor)  # 度数分布表\n```\n:::\n\n\n\nなおインストールされているパッケージについてはOutput paneの「Packages」のタブか\n`.packages(all.available=TRUE)`と入力することで確認できる．\n\n\n以上の作業をまとめて行いたい場合，`pacman`パッケージの`p_load()`関数を用いる．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pacmanパッケージがインストールされていない場合は以下からインストールを実行\n#install.packages(\"pacman\")\n# パッケージのインストール（もしインストールされていなければ）と呼び出し\npacman::p_load(tidyverse,\n               haven,\n               janitor)\n```\n:::\n\n\n\n\n\n\n::: {.callout-warning}\n## パッケージ名::関数名\n複数のパッケージで同じ関数名を使用することがある．そのため，意図しているパッケージの関数とは異なるを用いてしまったり，\n:::\n\n\n\n## パイプ演算子\n\n通常は`関数(引数)`として入力されるが，パイプ処理では`引数 |> 関数()`のようにパイプの左側の結果をパイプ右側に配置した関数の最初の引数（第1引数）に適用できる．\n更に`|>`を複数つなげて`データ |> 関数() |> 関数()` のようにできるため，どのような処理を行ったかが分かりやすい形でコードが整理される．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 総和\nx |> sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5016.82\n```\n:::\n\n```{.r .cell-code}\n# 平均値\nx |> mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.1682\n```\n:::\n\n```{.r .cell-code}\n# 平均値を丸める\nx |> mean() |> round(digits = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.2\n```\n:::\n\n```{.r .cell-code}\n# 中央値\nx |> median()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.47907\n```\n:::\n\n```{.r .cell-code}\n# 不偏分散\nx |> var()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 98.70409\n```\n:::\n\n```{.r .cell-code}\n# 標準偏差\nx |> sd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.934993\n```\n:::\n\n```{.r .cell-code}\n# 最大値\nx |> max()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 75.02645\n```\n:::\n\n```{.r .cell-code}\n# 最小値\nx |> min()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 22.51132\n```\n:::\n\n```{.r .cell-code}\n# 大きさ\nx |> length()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\n# 四分位数\nx |> quantile()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      0%      25%      50%      75%     100% \n22.51132 42.74002 50.47907 58.33915 75.02645 \n```\n:::\n\n```{.r .cell-code}\n# 要約\nx |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  22.51   42.74   50.48   50.17   58.34   75.03 \n```\n:::\n:::\n\n\n\n\n\n\n::: {.callout-tip}\n## 2つのパイプ演算子\nパイプ演算子はもともと`magrittr`パッケージの`%>%`という演算子のことを示していた．しかし，R4.1+では`|>`が標準で組み込まれている（ネイティブパイプと呼ばれる）．したがって`|>`を使用するのに`magrittr`パッケージを呼び出す必要はない．実際は`%>%`のほうが分かりやすく，使用しやすい場面もある．なお，パイプ演算子のショートカットキーは $\\uparrow$ +「Command」+「m」である．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'magrittr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    set_names\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tidyr':\n\n    extract\n```\n:::\n\n```{.r .cell-code}\nx %>% mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.1682\n```\n:::\n\n```{.r .cell-code}\nx |> mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.1682\n```\n:::\n:::\n\n\n:::\n\n\n\n\n\n\n\n\n## ディレクトリを作成する\n\nデータ，スクリプト，作成した図表，先行研究，資料，執筆した論文などをひとつのフォルダの中にまとめておこう．このようなあるプロジェクトに関連するファイルが含まれたフォルダを作業ディレクトリ（Working Directory）と呼ぶ．例えばここでは`R4SS`という名前のフォルダを作成する．中身はひとまずはからのままでもよい．\n\n`R4SS`というフォルダを作成しても，Rには`R4SS`フォルダは作業ディレクトリとしては認識していない．\n\n「Session」$\\rightarrow$「Set Working Directory」$\\rightarrow$「Choose Directory...」を選択し，`R4SS`フォルダを探して選択し，「Open」を選択することによって，\n`R4SS`が作業ディレクトリとしては認識される．\n\n\n![作業ディレクトリの変更方法](figures/set_working_directory.png)\n\n以下のコードを入力し，指定したフォルダが作業ディレクトリとして認識されているかどうかを確認してみよう．\n\n![作業ディレクトリの確認方法](figures/working_directory.png)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/sf/GitHub/R4SS\"\n```\n:::\n:::\n\n\n\n基本的にはRStudioを起動するたびに作業ディレクトリを指定する必要がある．\nしかし，以下で説明するプロジェクトを指定する作業を一度行ってしまえば，その作業の必要はない．\n\n\n## プロジェクトの作成\n\n@fig-project のように左上のアイコンからプロジェクトを作成しよう．すでに`R4SS`という名前のフォルダを作成されているという前提で手順を説明する．\n\n\n![プロジェクトを作成する](figures/project.png){#fig-project}\n\n\n@fig-project_select のように，新規でディレクトリ（New Directory）を作成するのか，すでにあるディレクトリ（Existing Directory）を使うのかをたずねられるので，ここではすでにあるディレクトリを使用する．「Browse」を選択し，作業ディレクトリを選択したら「Open」を選択する．「Projecto working directory:」の欄にパスが記入された状態になるので，「Create Project」を選択する．\n\n![新規にフォルダを作成するか既存のフォルダを利用するのかを選択する](figures/project_select.png){#fig-project_select}\n\n\nすると，`R4SS`というフォルダの中に`R4SS.Rproj`というファイルが作成される．このように，プロジェクトファイル（`R4SS.Rproj`のように`.Rproj`という拡張子のファイル）を作業ディレクトリに作成しておけば，`.Rproj`ファイルをクリックすると自動的にファイルのある場所が作業ディレクトリとして指定される．確認の方法は複数ある．\n\n1. Consoleペインのタブのすぐ下に作業ディレクトリが表示されているか．\n2. Filesペインの右側のプロジェクトのアイコンをクリックすると作業ディレクトリの中身がFilesの中に表示されているか．\n3. `getwd()`関数を実行する．\n4. `here`パッケージの`here()`関数を用いる．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 作業ディレクトリの確認\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/sf/GitHub/R4SS\"\n```\n:::\n:::\n\n\n\n`here`パッケージの`here()`関数を用いることで，作業ディレクトリの仲間で確認できる．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 作業ディレクトリの確認\nhere::here()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/sf/GitHub/R4SS\"\n```\n:::\n\n```{.r .cell-code}\n# 作業ディレクトリの中のdataフォルダ\nhere::here(\"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/sf/GitHub/R4SS/data\"\n```\n:::\n\n```{.r .cell-code}\n#作業ディレクトリの中のdataフォルダのcsvファイル\nhere::here(\"data\", \"u001.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/sf/GitHub/R4SS/data/u001.csv\"\n```\n:::\n:::\n\n\n\n## データの場所の確認\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::here(\"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/sf/GitHub/R4SS/data\"\n```\n:::\n:::\n\n\n\n\n\n\n\n\n## Rの終了\n\n-   スクリプト（.Rとなっているテキストのファイル）のみを保存して終了すればよい．\n-   個人的には作業スペースの保存は必要ないと考えるので，Save Workspace...などとたずねられても，Noとする．\n\n\n\n",
    "supporting": [
      "1.intro_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}