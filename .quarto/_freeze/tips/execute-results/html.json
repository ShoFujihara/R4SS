{
  "hash": "0bdb1bb134a5287a242eacf96c0bf656",
  "result": {
    "markdown": "# そのためメモ\n\n便利だが普段はあまりつかわないため忘れがちな点についてメモしておく．\n本テキストのどこかで扱う内容もメモする．\n\n\n## 文字列の処理\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"apple\"             \"apricot\"           \"avocado\"          \n [4] \"banana\"            \"bell pepper\"       \"bilberry\"         \n [7] \"blackberry\"        \"blackcurrant\"      \"blood orange\"     \n[10] \"blueberry\"         \"boysenberry\"       \"breadfruit\"       \n[13] \"canary melon\"      \"cantaloupe\"        \"cherimoya\"        \n[16] \"cherry\"            \"chili pepper\"      \"clementine\"       \n[19] \"cloudberry\"        \"coconut\"           \"cranberry\"        \n[22] \"cucumber\"          \"currant\"           \"damson\"           \n[25] \"date\"              \"dragonfruit\"       \"durian\"           \n[28] \"eggplant\"          \"elderberry\"        \"feijoa\"           \n[31] \"fig\"               \"goji berry\"        \"gooseberry\"       \n[34] \"grape\"             \"grapefruit\"        \"guava\"            \n[37] \"honeydew\"          \"huckleberry\"       \"jackfruit\"        \n[40] \"jambul\"            \"jujube\"            \"kiwi fruit\"       \n[43] \"kumquat\"           \"lemon\"             \"lime\"             \n[46] \"loquat\"            \"lychee\"            \"mandarine\"        \n[49] \"mango\"             \"mulberry\"          \"nectarine\"        \n[52] \"nut\"               \"olive\"             \"orange\"           \n[55] \"pamelo\"            \"papaya\"            \"passionfruit\"     \n[58] \"peach\"             \"pear\"              \"persimmon\"        \n[61] \"physalis\"          \"pineapple\"         \"plum\"             \n[64] \"pomegranate\"       \"pomelo\"            \"purple mangosteen\"\n[67] \"quince\"            \"raisin\"            \"rambutan\"         \n[70] \"raspberry\"         \"redcurrant\"        \"rock melon\"       \n[73] \"salal berry\"       \"satsuma\"           \"star fruit\"       \n[76] \"strawberry\"        \"tamarillo\"         \"tangerine\"        \n[79] \"ugli fruit\"        \"watermelon\"       \n```\n:::\n\n```{.r .cell-code}\n# 長さ\nstr_length(fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  5  7  7  6 11  8 10 12 12  9 11 10 12 10  9  6 12 10 10  7  9  8  7  6  4\n[26] 11  6  8 10  6  3 10 10  5 10  5  8 11  9  6  6 10  7  5  4  6  6  9  5  8\n[51]  9  3  5  6  6  6 12  5  4  9  8  9  4 11  6 17  6  6  8  9 10 10 11  7 10\n[76] 10  9  9 10 10\n```\n:::\n\n```{.r .cell-code}\n# くっつける\nstr_c(\"fruit_\", fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"fruit_apple\"             \"fruit_apricot\"          \n [3] \"fruit_avocado\"           \"fruit_banana\"           \n [5] \"fruit_bell pepper\"       \"fruit_bilberry\"         \n [7] \"fruit_blackberry\"        \"fruit_blackcurrant\"     \n [9] \"fruit_blood orange\"      \"fruit_blueberry\"        \n[11] \"fruit_boysenberry\"       \"fruit_breadfruit\"       \n[13] \"fruit_canary melon\"      \"fruit_cantaloupe\"       \n[15] \"fruit_cherimoya\"         \"fruit_cherry\"           \n[17] \"fruit_chili pepper\"      \"fruit_clementine\"       \n[19] \"fruit_cloudberry\"        \"fruit_coconut\"          \n[21] \"fruit_cranberry\"         \"fruit_cucumber\"         \n[23] \"fruit_currant\"           \"fruit_damson\"           \n[25] \"fruit_date\"              \"fruit_dragonfruit\"      \n[27] \"fruit_durian\"            \"fruit_eggplant\"         \n[29] \"fruit_elderberry\"        \"fruit_feijoa\"           \n[31] \"fruit_fig\"               \"fruit_goji berry\"       \n[33] \"fruit_gooseberry\"        \"fruit_grape\"            \n[35] \"fruit_grapefruit\"        \"fruit_guava\"            \n[37] \"fruit_honeydew\"          \"fruit_huckleberry\"      \n[39] \"fruit_jackfruit\"         \"fruit_jambul\"           \n[41] \"fruit_jujube\"            \"fruit_kiwi fruit\"       \n[43] \"fruit_kumquat\"           \"fruit_lemon\"            \n[45] \"fruit_lime\"              \"fruit_loquat\"           \n[47] \"fruit_lychee\"            \"fruit_mandarine\"        \n[49] \"fruit_mango\"             \"fruit_mulberry\"         \n[51] \"fruit_nectarine\"         \"fruit_nut\"              \n[53] \"fruit_olive\"             \"fruit_orange\"           \n[55] \"fruit_pamelo\"            \"fruit_papaya\"           \n[57] \"fruit_passionfruit\"      \"fruit_peach\"            \n[59] \"fruit_pear\"              \"fruit_persimmon\"        \n[61] \"fruit_physalis\"          \"fruit_pineapple\"        \n[63] \"fruit_plum\"              \"fruit_pomegranate\"      \n[65] \"fruit_pomelo\"            \"fruit_purple mangosteen\"\n[67] \"fruit_quince\"            \"fruit_raisin\"           \n[69] \"fruit_rambutan\"          \"fruit_raspberry\"        \n[71] \"fruit_redcurrant\"        \"fruit_rock melon\"       \n[73] \"fruit_salal berry\"       \"fruit_satsuma\"          \n[75] \"fruit_star fruit\"        \"fruit_strawberry\"       \n[77] \"fruit_tamarillo\"         \"fruit_tangerine\"        \n[79] \"fruit_ugli fruit\"        \"fruit_watermelon\"       \n```\n:::\n\n```{.r .cell-code}\n# パターンの数\nstr_count(fruit, \"[a-b]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 2 4 1 2 3 3 2 2 2 2 2 2 1 0 0 0 1 0 2 1 1 1 1 1 1 1 1 1 0 1 1 1 1 2 0 1\n[39] 1 2 1 0 1 0 0 1 0 2 1 1 1 0 0 1 1 3 1 1 1 0 1 1 0 2 0 1 0 1 3 2 1 0 3 2 1 2\n[77] 2 1 0 1\n```\n:::\n\n```{.r .cell-code}\n# パターンの発見\nstr_detect(fruit, \"[a-b]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n[25]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n[37] FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE\n[49]  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n[61]  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE\n[73]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n# 繰り返す\nstr_dup(letters, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"aaaaa\" \"bbbbb\" \"ccccc\" \"ddddd\" \"eeeee\" \"fffff\" \"ggggg\" \"hhhhh\" \"iiiii\"\n[10] \"jjjjj\" \"kkkkk\" \"lllll\" \"mmmmm\" \"nnnnn\" \"ooooo\" \"ppppp\" \"qqqqq\" \"rrrrr\"\n[19] \"sssss\" \"ttttt\" \"uuuuu\" \"vvvvv\" \"wwwww\" \"xxxxx\" \"yyyyy\" \"zzzzz\"\n```\n:::\n\n```{.r .cell-code}\n# 終わる\nfruit[str_ends(fruit, \"a\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"banana\"    \"cherimoya\" \"feijoa\"    \"guava\"     \"papaya\"    \"satsuma\"  \n```\n:::\n\n```{.r .cell-code}\n# 同じ\nstr_equal(fruit, \"banana\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\n# エスケープ\nstr_escape(\"^\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"\\\\^\"\n```\n:::\n\n```{.r .cell-code}\nstr_extract(fruit, \"[a-c]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"a\" \"a\" \"b\" \"b\" \"b\" \"b\" \"b\" \"b\" \"b\" \"b\" \"b\" \"c\" \"c\" \"c\" \"c\" \"c\" \"c\" \"c\"\n[20] \"c\" \"c\" \"c\" \"c\" \"a\" \"a\" \"a\" \"a\" \"a\" \"b\" \"a\" NA  \"b\" \"b\" \"a\" \"a\" \"a\" NA  \"c\"\n[39] \"a\" \"a\" \"b\" NA  \"a\" NA  NA  \"a\" \"c\" \"a\" \"a\" \"b\" \"c\" NA  NA  \"a\" \"a\" \"a\" \"a\"\n[58] \"a\" \"a\" NA  \"a\" \"a\" NA  \"a\" NA  \"a\" \"c\" \"a\" \"a\" \"a\" \"c\" \"c\" \"a\" \"a\" \"a\" \"a\"\n[77] \"a\" \"a\" NA  \"a\"\n```\n:::\n\n```{.r .cell-code}\nstr_extract(fruit, \"b[a-n]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] NA   NA   NA   \"ba\" \"be\" \"bi\" \"bl\" \"bl\" \"bl\" \"bl\" \"be\" NA   NA   NA   NA  \n[16] NA   NA   NA   \"be\" NA   \"be\" \"be\" NA   NA   NA   NA   NA   NA   \"be\" NA  \n[31] NA   \"be\" \"be\" NA   NA   NA   NA   \"be\" NA   NA   \"be\" NA   NA   NA   NA  \n[46] NA   NA   NA   NA   \"be\" NA   NA   NA   NA   NA   NA   NA   NA   NA   NA  \n[61] NA   NA   NA   NA   NA   NA   NA   NA   NA   \"be\" NA   NA   \"be\" NA   NA  \n[76] \"be\" NA   NA   NA   NA  \n```\n:::\n\n```{.r .cell-code}\nstr_extract_all(fruit, \"apple\", simplify = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      [,1]   \n [1,] \"apple\"\n [2,] \"\"     \n [3,] \"\"     \n [4,] \"\"     \n [5,] \"\"     \n [6,] \"\"     \n [7,] \"\"     \n [8,] \"\"     \n [9,] \"\"     \n[10,] \"\"     \n[11,] \"\"     \n[12,] \"\"     \n[13,] \"\"     \n[14,] \"\"     \n[15,] \"\"     \n[16,] \"\"     \n[17,] \"\"     \n[18,] \"\"     \n[19,] \"\"     \n[20,] \"\"     \n[21,] \"\"     \n[22,] \"\"     \n[23,] \"\"     \n[24,] \"\"     \n[25,] \"\"     \n[26,] \"\"     \n[27,] \"\"     \n[28,] \"\"     \n[29,] \"\"     \n[30,] \"\"     \n[31,] \"\"     \n[32,] \"\"     \n[33,] \"\"     \n[34,] \"\"     \n[35,] \"\"     \n[36,] \"\"     \n[37,] \"\"     \n[38,] \"\"     \n[39,] \"\"     \n[40,] \"\"     \n[41,] \"\"     \n[42,] \"\"     \n[43,] \"\"     \n[44,] \"\"     \n[45,] \"\"     \n[46,] \"\"     \n[47,] \"\"     \n[48,] \"\"     \n[49,] \"\"     \n[50,] \"\"     \n[51,] \"\"     \n[52,] \"\"     \n[53,] \"\"     \n[54,] \"\"     \n[55,] \"\"     \n[56,] \"\"     \n[57,] \"\"     \n[58,] \"\"     \n[59,] \"\"     \n[60,] \"\"     \n[61,] \"\"     \n[62,] \"apple\"\n[63,] \"\"     \n[64,] \"\"     \n[65,] \"\"     \n[66,] \"\"     \n[67,] \"\"     \n[68,] \"\"     \n[69,] \"\"     \n[70,] \"\"     \n[71,] \"\"     \n[72,] \"\"     \n[73,] \"\"     \n[74,] \"\"     \n[75,] \"\"     \n[76,] \"\"     \n[77,] \"\"     \n[78,] \"\"     \n[79,] \"\"     \n[80,] \"\"     \n```\n:::\n\n```{.r .cell-code}\nstr_detect(c(\"a\", \".\"), str_escape(\".\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\nx <- \"Hello, World!\"\nstr_extract_all(x, boundary(\"character\"), simplify = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\n[1,] \"H\"  \"e\"  \"l\"  \"l\"  \"o\"  \",\"  \" \"  \"W\"  \"o\"  \"r\"   \"l\"   \"d\"   \"!\"  \n```\n:::\n\n```{.r .cell-code}\nstr_extract_all(x, boundary(\"line_break\"), simplify = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]      [,2]    \n[1,] \"Hello, \" \"World!\"\n```\n:::\n\n```{.r .cell-code}\nstr_extract_all(x, boundary(\"sentence\"), simplify = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]           \n[1,] \"Hello, World!\"\n```\n:::\n\n```{.r .cell-code}\nstr_extract_all(x, boundary(\"word\"), simplify = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]    [,2]   \n[1,] \"Hello\" \"World\"\n```\n:::\n\n```{.r .cell-code}\nstr_flatten(fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"appleapricotavocadobananabell pepperbilberryblackberryblackcurrantblood orangeblueberryboysenberrybreadfruitcanary meloncantaloupecherimoyacherrychili pepperclementinecloudberrycoconutcranberrycucumbercurrantdamsondatedragonfruitdurianeggplantelderberryfeijoafiggoji berrygooseberrygrapegrapefruitguavahoneydewhuckleberryjackfruitjambuljujubekiwi fruitkumquatlemonlimeloquatlycheemandarinemangomulberrynectarinenutoliveorangepamelopapayapassionfruitpeachpearpersimmonphysalispineappleplumpomegranatepomelopurple mangosteenquinceraisinrambutanraspberryredcurrantrock melonsalal berrysatsumastar fruitstrawberrytamarillotangerineugli fruitwatermelon\"\n```\n:::\n\n```{.r .cell-code}\nstr_flatten_comma(fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"apple, apricot, avocado, banana, bell pepper, bilberry, blackberry, blackcurrant, blood orange, blueberry, boysenberry, breadfruit, canary melon, cantaloupe, cherimoya, cherry, chili pepper, clementine, cloudberry, coconut, cranberry, cucumber, currant, damson, date, dragonfruit, durian, eggplant, elderberry, feijoa, fig, goji berry, gooseberry, grape, grapefruit, guava, honeydew, huckleberry, jackfruit, jambul, jujube, kiwi fruit, kumquat, lemon, lime, loquat, lychee, mandarine, mango, mulberry, nectarine, nut, olive, orange, pamelo, papaya, passionfruit, peach, pear, persimmon, physalis, pineapple, plum, pomegranate, pomelo, purple mangosteen, quince, raisin, rambutan, raspberry, redcurrant, rock melon, salal berry, satsuma, star fruit, strawberry, tamarillo, tangerine, ugli fruit, watermelon\"\n```\n:::\n\n```{.r .cell-code}\nstr_glue(\"I bought \", \"{fruit}\", \" by {rnorm(length(fruit), mean = 100, sd = 10) |> format(digits = 3)} yen\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI bought apple by  87.1 yen\nI bought apricot by  88.4 yen\nI bought avocado by  83.5 yen\nI bought banana by 111.3 yen\nI bought bell pepper by 106.1 yen\nI bought bilberry by 105.3 yen\nI bought blackberry by  93.2 yen\nI bought blackcurrant by  79.7 yen\nI bought blood orange by 112.1 yen\nI bought blueberry by  96.3 yen\nI bought boysenberry by 105.4 yen\nI bought breadfruit by  91.7 yen\nI bought canary melon by  81.8 yen\nI bought cantaloupe by  91.8 yen\nI bought cherimoya by 102.6 yen\nI bought cherry by  90.0 yen\nI bought chili pepper by  92.9 yen\nI bought clementine by  96.1 yen\nI bought cloudberry by  83.7 yen\nI bought coconut by 120.4 yen\nI bought cranberry by 114.3 yen\nI bought cucumber by  93.6 yen\nI bought currant by 101.0 yen\nI bought damson by 101.1 yen\nI bought date by  97.4 yen\nI bought dragonfruit by  98.8 yen\nI bought durian by 122.3 yen\nI bought eggplant by  96.3 yen\nI bought elderberry by 114.6 yen\nI bought feijoa by  97.6 yen\nI bought fig by 111.3 yen\nI bought goji berry by 117.4 yen\nI bought gooseberry by  79.7 yen\nI bought grape by 101.6 yen\nI bought grapefruit by 102.7 yen\nI bought guava by 106.6 yen\nI bought honeydew by 109.9 yen\nI bought huckleberry by 102.3 yen\nI bought jackfruit by 106.9 yen\nI bought jambul by  90.5 yen\nI bought jujube by 100.0 yen\nI bought kiwi fruit by  89.5 yen\nI bought kumquat by  97.6 yen\nI bought lemon by  99.6 yen\nI bought lime by 105.1 yen\nI bought loquat by  96.5 yen\nI bought lychee by 109.9 yen\nI bought mandarine by 117.0 yen\nI bought mango by 100.1 yen\nI bought mulberry by  84.8 yen\nI bought nectarine by 105.2 yen\nI bought nut by 101.2 yen\nI bought olive by  93.7 yen\nI bought orange by  94.3 yen\nI bought pamelo by 100.2 yen\nI bought papaya by  93.0 yen\nI bought passionfruit by 104.0 yen\nI bought peach by 106.4 yen\nI bought pear by  97.8 yen\nI bought persimmon by 101.9 yen\nI bought physalis by  99.0 yen\nI bought pineapple by 102.6 yen\nI bought plum by  83.5 yen\nI bought pomegranate by  99.8 yen\nI bought pomelo by 100.9 yen\nI bought purple mangosteen by 104.7 yen\nI bought quince by 105.6 yen\nI bought raisin by  84.4 yen\nI bought rambutan by 101.2 yen\nI bought raspberry by 110.8 yen\nI bought redcurrant by 114.6 yen\nI bought rock melon by  94.2 yen\nI bought salal berry by 116.3 yen\nI bought satsuma by 116.1 yen\nI bought star fruit by 101.4 yen\nI bought strawberry by  92.3 yen\nI bought tamarillo by  99.0 yen\nI bought tangerine by 101.0 yen\nI bought ugli fruit by 109.5 yen\nI bought watermelon by  84.1 yen\n```\n:::\n\n```{.r .cell-code}\nstarwars |> str_glue_data(\"Is {height} over 100? {ifelse(height >= 100, 'Yes','No')}.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIs 172 over 100? Yes.\nIs 167 over 100? Yes.\nIs 96 over 100? No.\nIs 202 over 100? Yes.\nIs 150 over 100? Yes.\nIs 178 over 100? Yes.\nIs 165 over 100? Yes.\nIs 97 over 100? No.\nIs 183 over 100? Yes.\nIs 182 over 100? Yes.\nIs 188 over 100? Yes.\nIs 180 over 100? Yes.\nIs 228 over 100? Yes.\nIs 180 over 100? Yes.\nIs 173 over 100? Yes.\nIs 175 over 100? Yes.\nIs 170 over 100? Yes.\nIs 180 over 100? Yes.\nIs 66 over 100? No.\nIs 170 over 100? Yes.\nIs 183 over 100? Yes.\nIs 200 over 100? Yes.\nIs 190 over 100? Yes.\nIs 177 over 100? Yes.\nIs 175 over 100? Yes.\nIs 180 over 100? Yes.\nIs 150 over 100? Yes.\nIs NA over 100? NA.\nIs 88 over 100? No.\nIs 160 over 100? Yes.\nIs 193 over 100? Yes.\nIs 191 over 100? Yes.\nIs 170 over 100? Yes.\nIs 196 over 100? Yes.\nIs 224 over 100? Yes.\nIs 206 over 100? Yes.\nIs 183 over 100? Yes.\nIs 137 over 100? Yes.\nIs 112 over 100? Yes.\nIs 183 over 100? Yes.\nIs 163 over 100? Yes.\nIs 175 over 100? Yes.\nIs 180 over 100? Yes.\nIs 178 over 100? Yes.\nIs 94 over 100? No.\nIs 122 over 100? Yes.\nIs 163 over 100? Yes.\nIs 188 over 100? Yes.\nIs 198 over 100? Yes.\nIs 196 over 100? Yes.\nIs 171 over 100? Yes.\nIs 184 over 100? Yes.\nIs 188 over 100? Yes.\nIs 264 over 100? Yes.\nIs 188 over 100? Yes.\nIs 196 over 100? Yes.\nIs 185 over 100? Yes.\nIs 157 over 100? Yes.\nIs 183 over 100? Yes.\nIs 183 over 100? Yes.\nIs 170 over 100? Yes.\nIs 166 over 100? Yes.\nIs 165 over 100? Yes.\nIs 193 over 100? Yes.\nIs 191 over 100? Yes.\nIs 183 over 100? Yes.\nIs 168 over 100? Yes.\nIs 198 over 100? Yes.\nIs 229 over 100? Yes.\nIs 213 over 100? Yes.\nIs 167 over 100? Yes.\nIs 79 over 100? No.\nIs 96 over 100? No.\nIs 193 over 100? Yes.\nIs 191 over 100? Yes.\nIs 178 over 100? Yes.\nIs 216 over 100? Yes.\nIs 234 over 100? Yes.\nIs 188 over 100? Yes.\nIs 178 over 100? Yes.\nIs 206 over 100? Yes.\nIs NA over 100? NA.\nIs NA over 100? NA.\nIs NA over 100? NA.\nIs NA over 100? NA.\nIs NA over 100? NA.\nIs 165 over 100? Yes.\n```\n:::\n\n```{.r .cell-code}\nx <- c(NA,\"a\",\"b\",\"c\",NA)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA  \"a\" \"b\" \"c\" NA \n```\n:::\n\n```{.r .cell-code}\nstr_c(\"fruit_\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA        \"fruit_a\" \"fruit_b\" \"fruit_c\" NA       \n```\n:::\n\n```{.r .cell-code}\nstr_c(\"fruit_\", str_replace_na(x, replacement = \"DKNA\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"fruit_DKNA\" \"fruit_a\"    \"fruit_b\"    \"fruit_c\"    \"fruit_DKNA\"\n```\n:::\n\n```{.r .cell-code}\nstr_to_lower(LETTERS)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n:::\n\n```{.r .cell-code}\nstr_sub(fruit, 1, 1) <- str_to_upper(str_sub(fruit, 1, 1))\nfruit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Apple\"             \"Apricot\"           \"Avocado\"          \n [4] \"Banana\"            \"Bell pepper\"       \"Bilberry\"         \n [7] \"Blackberry\"        \"Blackcurrant\"      \"Blood orange\"     \n[10] \"Blueberry\"         \"Boysenberry\"       \"Breadfruit\"       \n[13] \"Canary melon\"      \"Cantaloupe\"        \"Cherimoya\"        \n[16] \"Cherry\"            \"Chili pepper\"      \"Clementine\"       \n[19] \"Cloudberry\"        \"Coconut\"           \"Cranberry\"        \n[22] \"Cucumber\"          \"Currant\"           \"Damson\"           \n[25] \"Date\"              \"Dragonfruit\"       \"Durian\"           \n[28] \"Eggplant\"          \"Elderberry\"        \"Feijoa\"           \n[31] \"Fig\"               \"Goji berry\"        \"Gooseberry\"       \n[34] \"Grape\"             \"Grapefruit\"        \"Guava\"            \n[37] \"Honeydew\"          \"Huckleberry\"       \"Jackfruit\"        \n[40] \"Jambul\"            \"Jujube\"            \"Kiwi fruit\"       \n[43] \"Kumquat\"           \"Lemon\"             \"Lime\"             \n[46] \"Loquat\"            \"Lychee\"            \"Mandarine\"        \n[49] \"Mango\"             \"Mulberry\"          \"Nectarine\"        \n[52] \"Nut\"               \"Olive\"             \"Orange\"           \n[55] \"Pamelo\"            \"Papaya\"            \"Passionfruit\"     \n[58] \"Peach\"             \"Pear\"              \"Persimmon\"        \n[61] \"Physalis\"          \"Pineapple\"         \"Plum\"             \n[64] \"Pomegranate\"       \"Pomelo\"            \"Purple mangosteen\"\n[67] \"Quince\"            \"Raisin\"            \"Rambutan\"         \n[70] \"Raspberry\"         \"Redcurrant\"        \"Rock melon\"       \n[73] \"Salal berry\"       \"Satsuma\"           \"Star fruit\"       \n[76] \"Strawberry\"        \"Tamarillo\"         \"Tangerine\"        \n[79] \"Ugli fruit\"        \"Watermelon\"       \n```\n:::\n\n```{.r .cell-code}\nstr_to_upper(\"gender\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"GENDER\"\n```\n:::\n\n```{.r .cell-code}\nstr_to_upper(\"全角のａ\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"全角のＡ\"\n```\n:::\n\n```{.r .cell-code}\nstr_to_lower(\"ESTSIMATE\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"estsimate\"\n```\n:::\n\n```{.r .cell-code}\nstr_to_lower(\"Ａ\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ａ\"\n```\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \"a\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [3] │ Avoc<a>do\n [4] │ B<a>n<a>n<a>\n [7] │ Bl<a>ckberry\n [8] │ Bl<a>ckcurr<a>nt\n [9] │ Blood or<a>nge\n[12] │ Bre<a>dfruit\n[13] │ C<a>n<a>ry melon\n[14] │ C<a>nt<a>loupe\n[15] │ Cherimoy<a>\n[21] │ Cr<a>nberry\n[23] │ Curr<a>nt\n[24] │ D<a>mson\n[25] │ D<a>te\n[26] │ Dr<a>gonfruit\n[27] │ Duri<a>n\n[28] │ Eggpl<a>nt\n[30] │ Feijo<a>\n[34] │ Gr<a>pe\n[35] │ Gr<a>pefruit\n[36] │ Gu<a>v<a>\n... and 28 more\n```\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \"[ae]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] │ Appl<e>\n [3] │ Avoc<a>do\n [4] │ B<a>n<a>n<a>\n [5] │ B<e>ll p<e>pp<e>r\n [6] │ Bilb<e>rry\n [7] │ Bl<a>ckb<e>rry\n [8] │ Bl<a>ckcurr<a>nt\n [9] │ Blood or<a>ng<e>\n[10] │ Blu<e>b<e>rry\n[11] │ Boys<e>nb<e>rry\n[12] │ Br<e><a>dfruit\n[13] │ C<a>n<a>ry m<e>lon\n[14] │ C<a>nt<a>loup<e>\n[15] │ Ch<e>rimoy<a>\n[16] │ Ch<e>rry\n[17] │ Chili p<e>pp<e>r\n[18] │ Cl<e>m<e>ntin<e>\n[19] │ Cloudb<e>rry\n[21] │ Cr<a>nb<e>rry\n[22] │ Cucumb<e>r\n... and 53 more\n```\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \".a.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [3] │ Avo<cad>o\n [4] │ <Ban>ana\n [7] │ B<lac>kberry\n [8] │ B<lac>kcur<ran>t\n [9] │ Blood o<ran>ge\n[12] │ Br<ead>fruit\n[13] │ <Can>ary melon\n[14] │ <Can><tal>oupe\n[21] │ C<ran>berry\n[23] │ Cur<ran>t\n[24] │ <Dam>son\n[25] │ <Dat>e\n[26] │ D<rag>onfruit\n[27] │ Dur<ian>\n[28] │ Eggp<lan>t\n[34] │ G<rap>e\n[35] │ G<rap>efruit\n[36] │ G<uav>a\n[39] │ <Jac>kfruit\n[40] │ <Jam>bul\n... and 26 more\n```\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \"^A\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] │ <A>pple\n[2] │ <A>pricot\n[3] │ <A>vocado\n```\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \"a$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [4] │ Banan<a>\n[15] │ Cherimoy<a>\n[30] │ Feijo<a>\n[36] │ Guav<a>\n[56] │ Papay<a>\n[74] │ Satsum<a>\n```\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \".a.|.b.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [3] │ Avo<cad>o\n [4] │ <Ban>ana\n [6] │ Bi<lbe>rry\n [7] │ B<lac><kbe>rry\n [8] │ B<lac>kcur<ran>t\n [9] │ Blood o<ran>ge\n[10] │ Blu<ebe>rry\n[11] │ Boyse<nbe>rry\n[12] │ Br<ead>fruit\n[13] │ <Can>ary melon\n[14] │ <Can><tal>oupe\n[19] │ Clou<dbe>rry\n[21] │ C<ran>berry\n[22] │ Cucu<mbe>r\n[23] │ Cur<ran>t\n[24] │ <Dam>son\n[25] │ <Dat>e\n[26] │ D<rag>onfruit\n[27] │ Dur<ian>\n[28] │ Eggp<lan>t\n... and 37 more\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(words, \"^y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[975] │ <y>ear\n[976] │ <y>es\n[977] │ <y>esterday\n[978] │ <y>et\n[979] │ <y>ou\n[980] │ <y>oung\n```\n:::\n\n```{.r .cell-code}\nstr_view(words, \"x$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[108] │ bo<x>\n[747] │ se<x>\n[772] │ si<x>\n[841] │ ta<x>\n```\n:::\n\n```{.r .cell-code}\nstr_view(words, \"^...$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [9] │ <act>\n [12] │ <add>\n [22] │ <age>\n [24] │ <ago>\n [26] │ <air>\n [27] │ <all>\n [38] │ <and>\n [41] │ <any>\n [51] │ <arm>\n [54] │ <art>\n [56] │ <ask>\n [68] │ <bad>\n [69] │ <bag>\n [73] │ <bar>\n [82] │ <bed>\n [89] │ <bet>\n [91] │ <big>\n [94] │ <bit>\n[108] │ <box>\n[109] │ <boy>\n... and 90 more\n```\n:::\n\n```{.r .cell-code}\nstr_view(words, \"^*.......*$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [4] │ <absolute>\n [5] │ <accept>\n [6] │ <account>\n [7] │ <achieve>\n [8] │ <across>\n[10] │ <active>\n[11] │ <actual>\n[13] │ <address>\n[15] │ <advertise>\n[16] │ <affect>\n[17] │ <afford>\n[19] │ <afternoon>\n[21] │ <against>\n[29] │ <almost>\n[31] │ <already>\n[32] │ <alright>\n[34] │ <although>\n[35] │ <always>\n[36] │ <america>\n[37] │ <amount>\n... and 368 more\n```\n:::\n\n```{.r .cell-code}\nstr_view(words, \"[^a-u]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [7] │ achie<v>e\n [10] │ acti<v>e\n [15] │ ad<v>ertise\n [28] │ allo<w>\n [31] │ alread<y>\n [35] │ al<w>a<y>s\n [40] │ ans<w>er\n [41] │ an<y>\n [45] │ appl<y>\n [61] │ authorit<y>\n [62] │ a<v>ailable\n [63] │ a<w>are\n [64] │ a<w>a<y>\n [65] │ a<w>ful\n [66] │ bab<y>\n [79] │ beaut<y>\n [86] │ belie<v>e\n [90] │ bet<w>een\n [98] │ blo<w>\n[102] │ bod<y>\n... and 229 more\n```\n:::\n\n```{.r .cell-code}\nstr_view(words, \"a|b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] │ <a>\n [2] │ <a><b>le\n [3] │ <a><b>out\n [4] │ <a><b>solute\n [5] │ <a>ccept\n [6] │ <a>ccount\n [7] │ <a>chieve\n [8] │ <a>cross\n [9] │ <a>ct\n[10] │ <a>ctive\n[11] │ <a>ctu<a>l\n[12] │ <a>dd\n[13] │ <a>ddress\n[14] │ <a>dmit\n[15] │ <a>dvertise\n[16] │ <a>ffect\n[17] │ <a>fford\n[18] │ <a>fter\n[19] │ <a>fternoon\n[20] │ <a>g<a>in\n... and 391 more\n```\n:::\n\n```{.r .cell-code}\nstr_view(words, \"(a|b)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] │ <a>\n [2] │ <a><b>le\n [3] │ <a><b>out\n [4] │ <a><b>solute\n [5] │ <a>ccept\n [6] │ <a>ccount\n [7] │ <a>chieve\n [8] │ <a>cross\n [9] │ <a>ct\n[10] │ <a>ctive\n[11] │ <a>ctu<a>l\n[12] │ <a>dd\n[13] │ <a>ddress\n[14] │ <a>dmit\n[15] │ <a>dvertise\n[16] │ <a>ffect\n[17] │ <a>fford\n[18] │ <a>fter\n[19] │ <a>fternoon\n[20] │ <a>g<a>in\n... and 391 more\n```\n:::\n:::\n\n\n\n## 正規表現（regular expression）\n\n- extended regular expressions (the default)\n- Perl-like regular expressions\n- literal regular expressions\n\nメタキャラクター：`. \\ | ( ) [ { ^ $ * + ?`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nletters\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n:::\n\n```{.r .cell-code}\ngrep(\"j|k\", fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  7  8 30 32 38 39 41 72\n```\n:::\n\n```{.r .cell-code}\ngrep(\"[jk]\", fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  7  8 30 32 38 39 41 72\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"j|k\", fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE\n[37] FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n[73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"[jk]\", fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE\n[37] FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n[73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nsub(\"[jk]\",\"XXXXX\", fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Apple\"             \"Apricot\"           \"Avocado\"          \n [4] \"Banana\"            \"Bell pepper\"       \"Bilberry\"         \n [7] \"BlacXXXXXberry\"    \"BlacXXXXXcurrant\"  \"Blood orange\"     \n[10] \"Blueberry\"         \"Boysenberry\"       \"Breadfruit\"       \n[13] \"Canary melon\"      \"Cantaloupe\"        \"Cherimoya\"        \n[16] \"Cherry\"            \"Chili pepper\"      \"Clementine\"       \n[19] \"Cloudberry\"        \"Coconut\"           \"Cranberry\"        \n[22] \"Cucumber\"          \"Currant\"           \"Damson\"           \n[25] \"Date\"              \"Dragonfruit\"       \"Durian\"           \n[28] \"Eggplant\"          \"Elderberry\"        \"FeiXXXXXoa\"       \n[31] \"Fig\"               \"GoXXXXXi berry\"    \"Gooseberry\"       \n[34] \"Grape\"             \"Grapefruit\"        \"Guava\"            \n[37] \"Honeydew\"          \"HucXXXXXleberry\"   \"JacXXXXXfruit\"    \n[40] \"Jambul\"            \"JuXXXXXube\"        \"Kiwi fruit\"       \n[43] \"Kumquat\"           \"Lemon\"             \"Lime\"             \n[46] \"Loquat\"            \"Lychee\"            \"Mandarine\"        \n[49] \"Mango\"             \"Mulberry\"          \"Nectarine\"        \n[52] \"Nut\"               \"Olive\"             \"Orange\"           \n[55] \"Pamelo\"            \"Papaya\"            \"Passionfruit\"     \n[58] \"Peach\"             \"Pear\"              \"Persimmon\"        \n[61] \"Physalis\"          \"Pineapple\"         \"Plum\"             \n[64] \"Pomegranate\"       \"Pomelo\"            \"Purple mangosteen\"\n[67] \"Quince\"            \"Raisin\"            \"Rambutan\"         \n[70] \"Raspberry\"         \"Redcurrant\"        \"RocXXXXX melon\"   \n[73] \"Salal berry\"       \"Satsuma\"           \"Star fruit\"       \n[76] \"Strawberry\"        \"Tamarillo\"         \"Tangerine\"        \n[79] \"Ugli fruit\"        \"Watermelon\"       \n```\n:::\n\n```{.r .cell-code}\ngsub(\"[jk]\",\"XXXXX\", fruit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Apple\"             \"Apricot\"           \"Avocado\"          \n [4] \"Banana\"            \"Bell pepper\"       \"Bilberry\"         \n [7] \"BlacXXXXXberry\"    \"BlacXXXXXcurrant\"  \"Blood orange\"     \n[10] \"Blueberry\"         \"Boysenberry\"       \"Breadfruit\"       \n[13] \"Canary melon\"      \"Cantaloupe\"        \"Cherimoya\"        \n[16] \"Cherry\"            \"Chili pepper\"      \"Clementine\"       \n[19] \"Cloudberry\"        \"Coconut\"           \"Cranberry\"        \n[22] \"Cucumber\"          \"Currant\"           \"Damson\"           \n[25] \"Date\"              \"Dragonfruit\"       \"Durian\"           \n[28] \"Eggplant\"          \"Elderberry\"        \"FeiXXXXXoa\"       \n[31] \"Fig\"               \"GoXXXXXi berry\"    \"Gooseberry\"       \n[34] \"Grape\"             \"Grapefruit\"        \"Guava\"            \n[37] \"Honeydew\"          \"HucXXXXXleberry\"   \"JacXXXXXfruit\"    \n[40] \"Jambul\"            \"JuXXXXXube\"        \"Kiwi fruit\"       \n[43] \"Kumquat\"           \"Lemon\"             \"Lime\"             \n[46] \"Loquat\"            \"Lychee\"            \"Mandarine\"        \n[49] \"Mango\"             \"Mulberry\"          \"Nectarine\"        \n[52] \"Nut\"               \"Olive\"             \"Orange\"           \n[55] \"Pamelo\"            \"Papaya\"            \"Passionfruit\"     \n[58] \"Peach\"             \"Pear\"              \"Persimmon\"        \n[61] \"Physalis\"          \"Pineapple\"         \"Plum\"             \n[64] \"Pomegranate\"       \"Pomelo\"            \"Purple mangosteen\"\n[67] \"Quince\"            \"Raisin\"            \"Rambutan\"         \n[70] \"Raspberry\"         \"Redcurrant\"        \"RocXXXXX melon\"   \n[73] \"Salal berry\"       \"Satsuma\"           \"Star fruit\"       \n[76] \"Strawberry\"        \"Tamarillo\"         \"Tangerine\"        \n[79] \"Ugli fruit\"        \"Watermelon\"       \n```\n:::\n\n```{.r .cell-code}\nx <- \"Hello World!\"\n\n# 文頭\ngrepl(\"^e\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"^H\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"^h\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# 文末\ngrepl(\"d$\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"!$\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# いずれか\ngrepl(\"[!]\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"[a]\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"[A-Za-z0-9]\", \"!!!!!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"[A-Za-z0-9]\", \"99999\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"[A-Za-z0-9]\", \"#####\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"[A-Za-z0-9]\", \"####1#\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# グルーピング\ngrepl(\"(e)\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"(e) +(d)\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"(e)+(w)\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"(H)(e)\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"(H)(l)\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ngrep(\"[e]\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"[e]\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"e\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"l|k\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"e\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"h\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\".\", x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\ngrep(\"[e]\", letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"[e]\", letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"e\", letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"l|k\", letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"e\", letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"h\", letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\ngrepl(\".\", letters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nstarwars$name[grepl(\"aa|[k]\", starwars$name)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Luke Skywalker\"        \"Biggs Darklighter\"     \"Anakin Skywalker\"     \n [4] \"Wilhuff Tarkin\"        \"Jek Tono Porkins\"      \"Bossk\"                \n [7] \"Ackbar\"                \"Wicket Systri Warrick\" \"Jar Jar Binks\"        \n[10] \"Quarsh Panaka\"         \"Shmi Skywalker\"        \"Dooku\"                \n[13] \"Shaak Ti\"             \n```\n:::\n:::\n\n\n\n## any_of, all_of\n\n変数名をオブジェクトとして用いるときに便利．\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_vars <- c(\"height\", \"mass\")\nstarwars |> select(select_vars) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(select_vars)\n\n  # Now:\n  data %>% select(all_of(select_vars))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 × 2\n   height  mass\n    <int> <dbl>\n 1    172    77\n 2    167    75\n 3     96    32\n 4    202   136\n 5    150    49\n 6    178   120\n 7    165    75\n 8     97    32\n 9    183    84\n10    182    77\n# ℹ 77 more rows\n```\n:::\n\n```{.r .cell-code}\nstarwars |> select(any_of(select_vars))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 × 2\n   height  mass\n    <int> <dbl>\n 1    172    77\n 2    167    75\n 3     96    32\n 4    202   136\n 5    150    49\n 6    178   120\n 7    165    75\n 8     97    32\n 9    183    84\n10    182    77\n# ℹ 77 more rows\n```\n:::\n:::\n\n\n\n## map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\nx <- 1:10\nsqrt(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n```\n:::\n\n```{.r .cell-code}\nmap(x, sqrt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 1.414214\n\n[[3]]\n[1] 1.732051\n\n[[4]]\n[1] 2\n\n[[5]]\n[1] 2.236068\n\n[[6]]\n[1] 2.44949\n\n[[7]]\n[1] 2.645751\n\n[[8]]\n[1] 2.828427\n\n[[9]]\n[1] 3\n\n[[10]]\n[1] 3.162278\n```\n:::\n\n```{.r .cell-code}\nmap_vec(x, sqrt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n```\n:::\n:::\n\n\nd <- d %>% mutate(gpa_std = (gpa_sum - mean(gpa_sum, na.rm = TRUE)) \n  / sd(gpa_sum, na.rm = TRUE))\n\n## 部分一致\n\n`data.frame`形式であれば`$`で変数名の部分一致が利用できるが，`tibble`形式ではできない．部分一致によってエラーが生じる可能性もあるので省略せずに入力するほうが良い．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nstarwars\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 × 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk…    172    77 blond      fair       blue            19   male  mascu…\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu…\n 3 R2-D2        96    32 <NA>       white, bl… red             33   none  mascu…\n 4 Darth V…    202   136 none       white      yellow          41.9 male  mascu…\n 5 Leia Or…    150    49 brown      light      brown           19   fema… femin…\n 6 Owen La…    178   120 brown, gr… light      blue            52   male  mascu…\n 7 Beru Wh…    165    75 brown      light      blue            47   fema… femin…\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu…\n 9 Biggs D…    183    84 black      light      brown           24   male  mascu…\n10 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male  mascu…\n# ℹ 77 more rows\n# ℹ 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\nstarwars$hei\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `hei`.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nstarwars$ha\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unknown or uninitialised column: `ha`.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n\n```{.r .cell-code}\nstarwars_df <- as.data.frame(starwars) \nstarwars_df$hei\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 172 167  96 202 150 178 165  97 183 182 188 180 228 180 173 175 170 180  66\n[20] 170 183 200 190 177 175 180 150  NA  88 160 193 191 170 196 224 206 183 137\n[39] 112 183 163 175 180 178  94 122 163 188 198 196 171 184 188 264 188 196 185\n[58] 157 183 183 170 166 165 193 191 183 168 198 229 213 167  79  96 193 191 178\n[77] 216 234 188 178 206  NA  NA  NA  NA  NA 165\n```\n:::\n\n```{.r .cell-code}\nstarwars_df$ha\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"blond\"         NA              NA              \"none\"         \n [5] \"brown\"         \"brown, grey\"   \"brown\"         NA             \n [9] \"black\"         \"auburn, white\" \"blond\"         \"auburn, grey\" \n[13] \"brown\"         \"brown\"         NA              NA             \n[17] \"brown\"         \"brown\"         \"white\"         \"grey\"         \n[21] \"black\"         \"none\"          \"none\"          \"black\"        \n[25] \"none\"          \"none\"          \"auburn\"        \"brown\"        \n[29] \"brown\"         \"none\"          \"brown\"         \"none\"         \n[33] \"blond\"         \"none\"          \"none\"          \"none\"         \n[37] \"brown\"         \"black\"         \"none\"          \"black\"        \n[41] \"black\"         \"none\"          \"none\"          \"none\"         \n[45] \"none\"          \"none\"          \"none\"          \"none\"         \n[49] \"white\"         \"none\"          \"black\"         \"none\"         \n[53] \"none\"          \"none\"          \"none\"          \"none\"         \n[57] \"black\"         \"brown\"         \"brown\"         \"none\"         \n[61] \"black\"         \"black\"         \"brown\"         \"white\"        \n[65] \"black\"         \"black\"         \"blonde\"        \"none\"         \n[69] \"none\"          \"none\"          \"white\"         \"none\"         \n[73] \"none\"          \"none\"          \"none\"          \"none\"         \n[77] \"none\"          \"brown\"         \"brown\"         \"none\"         \n[81] \"none\"          \"black\"         \"brown\"         \"brown\"        \n[85] \"none\"          \"unknown\"       \"brown\"        \n```\n:::\n:::\n\n\n\n## 因子\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(0,1,1,1,0)\ny <- factor(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 1 1 0\nLevels: 0 1\n```\n:::\n\n```{.r .cell-code}\nstr(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Factor w/ 2 levels \"0\",\"1\": 1 2 2 2 1\n```\n:::\n\n```{.r .cell-code}\nattributes(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$levels\n[1] \"0\" \"1\"\n\n$class\n[1] \"factor\"\n```\n:::\n\n```{.r .cell-code}\nlevels(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0\" \"1\"\n```\n:::\n\n```{.r .cell-code}\nas.numeric(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 2 2 1\n```\n:::\n\n```{.r .cell-code}\nas.numeric(as.character(y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 1 1 1 0\n```\n:::\n:::\n\n\n\n## 集計データを個票データに変換する\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# クロス表\noccupationalStatus\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      destination\norigin   1   2   3   4   5   6   7   8\n     1  50  19  26   8   7  11   6   2\n     2  16  40  34  18  11  20   8   3\n     3  12  35  65  66  35  88  23  21\n     4  11  20  58 110  40 183  64  32\n     5   2   8  12  23  25  46  28  12\n     6  12  28 102 162  90 554 230 177\n     7   0   6  19  40  21 158 143  71\n     8   0   3  14  32  15 126  91 106\n```\n:::\n\n```{.r .cell-code}\n# 集計データ\ndata.frame(occupationalStatus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   origin destination Freq\n1       1           1   50\n2       2           1   16\n3       3           1   12\n4       4           1   11\n5       5           1    2\n6       6           1   12\n7       7           1    0\n8       8           1    0\n9       1           2   19\n10      2           2   40\n11      3           2   35\n12      4           2   20\n13      5           2    8\n14      6           2   28\n15      7           2    6\n16      8           2    3\n17      1           3   26\n18      2           3   34\n19      3           3   65\n20      4           3   58\n21      5           3   12\n22      6           3  102\n23      7           3   19\n24      8           3   14\n25      1           4    8\n26      2           4   18\n27      3           4   66\n28      4           4  110\n29      5           4   23\n30      6           4  162\n31      7           4   40\n32      8           4   32\n33      1           5    7\n34      2           5   11\n35      3           5   35\n36      4           5   40\n37      5           5   25\n38      6           5   90\n39      7           5   21\n40      8           5   15\n41      1           6   11\n42      2           6   20\n43      3           6   88\n44      4           6  183\n45      5           6   46\n46      6           6  554\n47      7           6  158\n48      8           6  126\n49      1           7    6\n50      2           7    8\n51      3           7   23\n52      4           7   64\n53      5           7   28\n54      6           7  230\n55      7           7  143\n56      8           7   91\n57      1           8    2\n58      2           8    3\n59      3           8   21\n60      4           8   32\n61      5           8   12\n62      6           8  177\n63      7           8   71\n64      8           8  106\n```\n:::\n\n```{.r .cell-code}\n# 個票データ\ndf_occupationalStatus <- vcdExtra::expand.dft(data.frame(occupationalStatus), dreq = \"Freq\") |> \n  mutate(across(origin:destination, factor))\n# \ndf_occupationalStatus |> summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     origin      destination  \n 6      :1355   6      :1186  \n 4      : 518   7      : 593  \n 7      : 458   4      : 459  \n 8      : 387   8      : 424  \n 3      : 345   3      : 330  \n 5      : 156   5      : 244  \n (Other): 279   (Other): 262  \n```\n:::\n:::\n\n\n\n\n## 関数の中身を確認する\n\n`mean()`関数がどのようにして作成されているのかを確認したい場合，`mean`のように`()`をとって入力すればよい．しかし，`UseMethod(\"mean\")`のように関数が表示され，中身を確認できない場合もある．\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x11bb27678>\n<environment: namespace:base>\n```\n:::\n:::\n\n\nこのような場合は，`methods()`関数を用いるとよい\n\n::: {.cell}\n\n```{.r .cell-code}\nmethods(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] mean,ANY-method          mean,Matrix-method       mean,sparseMatrix-method\n [4] mean,sparseVector-method mean.Date*               mean.default*           \n [7] mean.difftime*           mean.POSIXct*            mean.POSIXlt*           \n[10] mean.quosure*            mean.vctrs_vctr*         mean.yearmon*           \n[13] mean.yearqtr*            mean.zoo*               \nsee '?methods' for accessing help and source code\n```\n:::\n:::\n\n\n様々な結果が示されるがここでは，2めの要素にある`mean.default*`を確認しよう．`*`をとって`mean.default`と入力するだけでよい．\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean.default\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, trim = 0, na.rm = FALSE, ...) \n{\n    if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {\n        warning(\"argument is not numeric or logical: returning NA\")\n        return(NA_real_)\n    }\n    if (isTRUE(na.rm)) \n        x <- x[!is.na(x)]\n    if (!is.numeric(trim) || length(trim) != 1L) \n        stop(\"'trim' must be numeric of length one\")\n    n <- length(x)\n    if (trim > 0 && n) {\n        if (is.complex(x)) \n            stop(\"trimmed means are not defined for complex data\")\n        if (anyNA(x)) \n            return(NA_real_)\n        if (trim >= 0.5) \n            return(stats::median(x, na.rm = FALSE))\n        lo <- floor(n * trim) + 1\n        hi <- n + 1 - lo\n        x <- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]\n    }\n    .Internal(mean(x))\n}\n<bytecode: 0x11ffeb820>\n<environment: namespace:base>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngetAnywhere(mean.default)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA single object matching 'mean.default' was found\nIt was found in the following places\n  package:base\n  registered S3 method for mean from namespace base\n  namespace:base\nwith value\n\nfunction (x, trim = 0, na.rm = FALSE, ...) \n{\n    if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {\n        warning(\"argument is not numeric or logical: returning NA\")\n        return(NA_real_)\n    }\n    if (isTRUE(na.rm)) \n        x <- x[!is.na(x)]\n    if (!is.numeric(trim) || length(trim) != 1L) \n        stop(\"'trim' must be numeric of length one\")\n    n <- length(x)\n    if (trim > 0 && n) {\n        if (is.complex(x)) \n            stop(\"trimmed means are not defined for complex data\")\n        if (anyNA(x)) \n            return(NA_real_)\n        if (trim >= 0.5) \n            return(stats::median(x, na.rm = FALSE))\n        lo <- floor(n * trim) + 1\n        hi <- n + 1 - lo\n        x <- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]\n    }\n    .Internal(mean(x))\n}\n<bytecode: 0x11ffeb820>\n<environment: namespace:base>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DescTools)\nOddsRatio\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, conf.level = NULL, ...) \n{\n    UseMethod(\"OddsRatio\")\n}\n<bytecode: 0x128cc05b8>\n<environment: namespace:DescTools>\n```\n:::\n\n```{.r .cell-code}\nmethods(OddsRatio)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] OddsRatio.default*  OddsRatio.glm*      OddsRatio.multinom*\n[4] OddsRatio.zeroinfl*\nsee '?methods' for accessing help and source code\n```\n:::\n\n```{.r .cell-code}\nDescTools:::OddsRatio.default\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, conf.level = NULL, y = NULL, method = c(\"wald\", \n    \"mle\", \"midp\"), interval = c(0, 1000), ...) \n{\n    if (!is.null(y)) \n        x <- table(x, y, ...)\n    if (is.null(conf.level)) \n        conf.level <- NA\n    p <- (d <- dim(x))[1L]\n    if (!is.numeric(x) || length(d) != 2L || p != d[2L] || p != \n        2L) \n        stop(\"'x' is not a 2x2 numeric matrix\")\n    switch(match.arg(arg = method, choices = c(\"wald\", \"mle\", \n        \"midp\")), wald = {\n        if (any(x == 0)) x <- x + 0.5\n        lx <- log(x)\n        or <- exp(lx[1, 1] + lx[2, 2] - lx[1, 2] - lx[2, 1])\n        if (is.na(conf.level)) {\n            res <- or\n        } else {\n            sigma2lor <- sum(1/x)\n            ci <- or * exp(c(1, -1) * qnorm((1 - conf.level)/2) * \n                sqrt(sigma2lor))\n            res <- c(`odds ratio` = or, lwr.ci = ci[1], upr.ci = ci[2])\n        }\n    }, mle = {\n        if (is.na(conf.level)) {\n            res <- unname(fisher.test(x, conf.int = FALSE)$estimate)\n        } else {\n            res <- fisher.test(x, conf.level = conf.level)\n            res <- c(res$estimate, lwr.ci = res$conf.int[1], \n                upr.ci = res$conf.int[2])\n        }\n    }, midp = {\n        a1 <- x[1, 1]\n        a0 <- x[1, 2]\n        b1 <- x[2, 1]\n        b0 <- x[2, 2]\n        or <- 1\n        mue <- function(a1, a0, b1, b0, or) {\n            mm <- matrix(c(a1, a0, b1, b0), 2, 2, byrow = TRUE)\n            fisher.test(mm, or = or, alternative = \"l\")$p - fisher.test(x = x, \n                or = or, alternative = \"g\")$p\n        }\n        midp <- function(a1, a0, b1, b0, or = 1) {\n            mm <- matrix(c(a1, a0, b1, b0), 2, 2, byrow = TRUE)\n            lteqtoa1 <- fisher.test(mm, or = or, alternative = \"l\")$p.val\n            gteqtoa1 <- fisher.test(mm, or = or, alternative = \"g\")$p.val\n            0.5 * (lteqtoa1 - gteqtoa1 + 1)\n        }\n        EST <- uniroot(function(or) {\n            mue(a1, a0, b1, b0, or)\n        }, interval = interval)$root\n        if (is.na(conf.level)) {\n            res <- EST\n        } else {\n            alpha <- 1 - conf.level\n            LCL <- uniroot(function(or) {\n                1 - midp(a1, a0, b1, b0, or) - alpha/2\n            }, interval = interval)$root\n            UCL <- 1/uniroot(function(or) {\n                midp(a1, a0, b1, b0, or = 1/or) - alpha/2\n            }, interval = interval)$root\n            res <- c(`odds ratio` = EST, lwr.ci = LCL, upr.ci = UCL)\n        }\n    })\n    return(res)\n}\n<bytecode: 0x12b98ddc0>\n<environment: namespace:DescTools>\n```\n:::\n\n```{.r .cell-code}\ngetAnywhere(OddsRatio.default)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nA single object matching 'OddsRatio.default' was found\nIt was found in the following places\n  registered S3 method for OddsRatio from namespace DescTools\n  namespace:DescTools\nwith value\n\nfunction (x, conf.level = NULL, y = NULL, method = c(\"wald\", \n    \"mle\", \"midp\"), interval = c(0, 1000), ...) \n{\n    if (!is.null(y)) \n        x <- table(x, y, ...)\n    if (is.null(conf.level)) \n        conf.level <- NA\n    p <- (d <- dim(x))[1L]\n    if (!is.numeric(x) || length(d) != 2L || p != d[2L] || p != \n        2L) \n        stop(\"'x' is not a 2x2 numeric matrix\")\n    switch(match.arg(arg = method, choices = c(\"wald\", \"mle\", \n        \"midp\")), wald = {\n        if (any(x == 0)) x <- x + 0.5\n        lx <- log(x)\n        or <- exp(lx[1, 1] + lx[2, 2] - lx[1, 2] - lx[2, 1])\n        if (is.na(conf.level)) {\n            res <- or\n        } else {\n            sigma2lor <- sum(1/x)\n            ci <- or * exp(c(1, -1) * qnorm((1 - conf.level)/2) * \n                sqrt(sigma2lor))\n            res <- c(`odds ratio` = or, lwr.ci = ci[1], upr.ci = ci[2])\n        }\n    }, mle = {\n        if (is.na(conf.level)) {\n            res <- unname(fisher.test(x, conf.int = FALSE)$estimate)\n        } else {\n            res <- fisher.test(x, conf.level = conf.level)\n            res <- c(res$estimate, lwr.ci = res$conf.int[1], \n                upr.ci = res$conf.int[2])\n        }\n    }, midp = {\n        a1 <- x[1, 1]\n        a0 <- x[1, 2]\n        b1 <- x[2, 1]\n        b0 <- x[2, 2]\n        or <- 1\n        mue <- function(a1, a0, b1, b0, or) {\n            mm <- matrix(c(a1, a0, b1, b0), 2, 2, byrow = TRUE)\n            fisher.test(mm, or = or, alternative = \"l\")$p - fisher.test(x = x, \n                or = or, alternative = \"g\")$p\n        }\n        midp <- function(a1, a0, b1, b0, or = 1) {\n            mm <- matrix(c(a1, a0, b1, b0), 2, 2, byrow = TRUE)\n            lteqtoa1 <- fisher.test(mm, or = or, alternative = \"l\")$p.val\n            gteqtoa1 <- fisher.test(mm, or = or, alternative = \"g\")$p.val\n            0.5 * (lteqtoa1 - gteqtoa1 + 1)\n        }\n        EST <- uniroot(function(or) {\n            mue(a1, a0, b1, b0, or)\n        }, interval = interval)$root\n        if (is.na(conf.level)) {\n            res <- EST\n        } else {\n            alpha <- 1 - conf.level\n            LCL <- uniroot(function(or) {\n                1 - midp(a1, a0, b1, b0, or) - alpha/2\n            }, interval = interval)$root\n            UCL <- 1/uniroot(function(or) {\n                midp(a1, a0, b1, b0, or = 1/or) - alpha/2\n            }, interval = interval)$root\n            res <- c(`odds ratio` = EST, lwr.ci = LCL, upr.ci = UCL)\n        }\n    })\n    return(res)\n}\n<bytecode: 0x12b98ddc0>\n<environment: namespace:DescTools>\n```\n:::\n:::\n\n\n\n## unname\n\nCramer's Vを`chisq.test()`の結果を利用して作成する．\nその際，`unname()`によってカイ2乗統計量の名前をとる．\n\n\n::: {.cell}\n\n```{.r .cell-code}\noccupationalStatus\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      destination\norigin   1   2   3   4   5   6   7   8\n     1  50  19  26   8   7  11   6   2\n     2  16  40  34  18  11  20   8   3\n     3  12  35  65  66  35  88  23  21\n     4  11  20  58 110  40 183  64  32\n     5   2   8  12  23  25  46  28  12\n     6  12  28 102 162  90 554 230 177\n     7   0   6  19  40  21 158 143  71\n     8   0   3  14  32  15 126  91 106\n```\n:::\n\n```{.r .cell-code}\nchisq.test(occupationalStatus)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in chisq.test(occupationalStatus): Chi-squared approximation may be\nincorrect\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tPearson's Chi-squared test\n\ndata:  occupationalStatus\nX-squared = 1416, df = 49, p-value < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\nX2 <- chisq.test(occupationalStatus)$statistic |> unname()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in chisq.test(occupationalStatus): Chi-squared approximation may be\nincorrect\n```\n:::\n\n```{.r .cell-code}\nX2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1416.04\n```\n:::\n\n```{.r .cell-code}\nmy_CramerV <- sqrt(X2/min(dim(occupationalStatus)-1)/sum(occupationalStatus))\nmy_CramerV\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2404799\n```\n:::\n\n```{.r .cell-code}\nDescTools::CramerV(occupationalStatus)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2404799\n```\n:::\n:::\n",
    "supporting": [
      "tips_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}