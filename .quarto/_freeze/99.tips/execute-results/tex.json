{
  "hash": "c24d45c14ab6a9af0e6b257153bc42a9",
  "result": {
    "markdown": "# 便利なRの機能\n\n便利だが普段はあまりつかわないため忘れがちな点についてメモしておく．\n\n## 関数の中身を確認する\n\n`mean()`関数がどのようにして作成されているのかを確認したい場合，`mean`のように`()`をとって入力すればよい．しかし，`UseMethod(\"mean\")`のように関数が表示され，中身を確認できない場合もある．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x154684a40>\n<environment: namespace:base>\n```\n:::\n:::\n\n\n\nこのような場合は，`methods()`関数を用いるとよい\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmethods(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] mean.Date*     mean.default*  mean.difftime* mean.POSIXct*  mean.POSIXlt* \n[6] mean.quosure* \nsee '?methods' for accessing help and source code\n```\n:::\n:::\n\n\n\n．様々な結果が示されるがここでは，2めの要素にある`mean.default*`を確認しよう．`*`をとって`mean.default`と入力するだけでよい．\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean.default\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, trim = 0, na.rm = FALSE, ...) \n{\n    if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {\n        warning(\"argument is not numeric or logical: returning NA\")\n        return(NA_real_)\n    }\n    if (isTRUE(na.rm)) \n        x <- x[!is.na(x)]\n    if (!is.numeric(trim) || length(trim) != 1L) \n        stop(\"'trim' must be numeric of length one\")\n    n <- length(x)\n    if (trim > 0 && n) {\n        if (is.complex(x)) \n            stop(\"trimmed means are not defined for complex data\")\n        if (anyNA(x)) \n            return(NA_real_)\n        if (trim >= 0.5) \n            return(stats::median(x, na.rm = FALSE))\n        lo <- floor(n * trim) + 1\n        hi <- n + 1 - lo\n        x <- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]\n    }\n    .Internal(mean(x))\n}\n<bytecode: 0x1432afd60>\n<environment: namespace:base>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}