[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "社会調査のためのRの入門です．"
  },
  {
    "objectID": "3.variables.html",
    "href": "3.variables.html",
    "title": "",
    "section": "",
    "text": "dplyrパッケージの4つの関数を使用方法をマスターしよう．\n\ncount関数\nsummarise関数\nmutate関数\nfilter関数\nselect関数\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union"
  },
  {
    "objectID": "2.data.html",
    "href": "2.data.html",
    "title": "",
    "section": "",
    "text": "データの読み込みを行う際にreadrとhavenパッケージを用いる． readrパッケージのかわりにtidyverseパッケージを呼び出してもよい．\n\n# パッケージの呼び出し\npacman::p_load(\n  here,\n  readr,   # csvファイルを読み込む．tidyverseとしてもよい．\n  haven   # sav, dta, sasファイルなどを読み込む．\n  )\n\n\n\n\n\n\n# read.csvでcsvデータを読み込む\nd_csv_1 <- read.csv(\"data/raw/u001.csv\")\n# 確認\nhead(d_csv_1)\n\n  caseid sex ybirth mbirth ZQ03 JC_1 JC_41 ZQ08A ZQ08B ZQ08C ZQ08D ZQ08E ZQ08F\n1  10001   1   1976     10    1    2    12     4     1     3     4     4     4\n2  10002   1   1972      1    1    2     9     6     2     2     4     6     6\n3  10003   1   1975      4    1    2     9     6     6     6     3     6     6\n4  10004   2   1974     11    1    2     7     6     1     1     5     1     1\n5  10005   1   1978      1    2   10    88     6     2     2     4     1     2\n6  10006   1   1984      2    2   10    88     6     1     2     6     3     6\n  ZQ08G ZQ08H ZQ11_A ZQ11_B ZQ11_C ZQ11_D ZQ11_E ZQ11_F ZQ11_G ZQ11_H ZQ11_I\n1     5     3      2      2      2      2      2      2      2      2      2\n2     6     5      2      2      2      2      2      1      2      2      2\n3     4     6      2      2      2      2      1      1      1      2      2\n4     4     2      2      2      2      2      2      2      2      2      2\n5     5     1      2      2      2      2      1      2      2      2      2\n6     6     6      2      2      2      2      2      2      2      2      2\n  ZQ11_J ZQ11_K ZQ11_L ZQ11_M ZQ11_N ZQ11_O ZQ12 ZQ14_1A ZQ14_1B ZQ14_1C\n1      2      2      2      2      2      2    2       0       0       1\n2      2      2      2      2      2      2    2       0       0       0\n3      2      2      2      2      2      2    4       0       0       0\n4      2      2      2      2      2      2    3       1       1       0\n5      1      2      1      2      2      2    4       2       0       0\n6      1      2      2      2      1      2    2       0       0       1\n  ZQ14_1D ZQ23A ZQ23B ZQ23C ZQ23D ZQ24 ZQ25 ZQ26A ZQ26B ZQ26C ZQ26D ZQ26E ZQ26F\n1       0     5     5     5     4    1    1     4     5     3     5     3     4\n2       1     3     5     2     2    1    3     5     5     2     5     1     5\n3       0     3     2     2     2    1    3     5     5     4     5     3     5\n4       0     3     5     2     2    1    2     3     5     2     4     2     4\n5       0     5     8     5     5    1    2     3     3     4     3     3     4\n6       0     4     8     3     2    1    4     3     4     3     4     3     5\n  ZQ30D ZQ35 ZQ39A ZQ42 ZQ43 ZQ47A ZQ47B ZQ47C ZQ50 ZQ52A ZQ52Y ZQ54A ZQ54B\n1     2    4     4    9    2     6     5     8    2     2    51     1     2\n2     1    5     3    1    1     9     5    10    2     2    51     1     2\n3     1    4     5    9    4     6     3     6    2     2    56     3     5\n4     2    5     3    3    3     6     8     9    2     2    48     6     1\n5     4    5     4    2    2     1    99    99    1     8   888     8     8\n6     4    7     4    2    3     2    15    10    1     8   888     8     8\n  ZQ54C ZQ54D ZQ61_A ZQ61_B ZQ61_C ZQ61_D ZQ61_E ZQ61_F ZQ61_G ZQ61_H ZQ61_I\n1     9     9      1      2      2      2      2      2      2      2      2\n2     2     4      1      2      2      2      2      2      2      2      2\n3     3     2      1      2      2      2      2      2      2      2      2\n4     5     4      1      2      2      2      2      2      2      2      2\n5     8     8      2      2      2      1      2      2      2      2      2\n6     8     8      1      2      2      2      2      2      2      2      2\n  ZQ62\n1    3\n2    2\n3    2\n4    4\n5    1\n6    2\n\n# データのクラス\nclass(d_csv_1)\n\n[1] \"data.frame\"\n\n\n\n\n\n\n# read_csvでcsvデータを読み込む\nd_csv_2 <- read_csv(\"data/raw/u001.csv\")\n\nRows: 1000 Columns: 72\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (72): caseid, sex, ybirth, mbirth, ZQ03, JC_1, JC_41, ZQ08A, ZQ08B, ZQ08...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# 確認\nhead(d_csv_2)\n\n# A tibble: 6 × 72\n  caseid   sex ybirth mbirth  ZQ03  JC_1 JC_41 ZQ08A ZQ08B ZQ08C ZQ08D ZQ08E\n   <dbl> <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1  10001     1   1976     10     1     2    12     4     1     3     4     4\n2  10002     1   1972      1     1     2     9     6     2     2     4     6\n3  10003     1   1975      4     1     2     9     6     6     6     3     6\n4  10004     2   1974     11     1     2     7     6     1     1     5     1\n5  10005     1   1978      1     2    10    88     6     2     2     4     1\n6  10006     1   1984      2     2    10    88     6     1     2     6     3\n# ℹ 60 more variables: ZQ08F <dbl>, ZQ08G <dbl>, ZQ08H <dbl>, ZQ11_A <dbl>,\n#   ZQ11_B <dbl>, ZQ11_C <dbl>, ZQ11_D <dbl>, ZQ11_E <dbl>, ZQ11_F <dbl>,\n#   ZQ11_G <dbl>, ZQ11_H <dbl>, ZQ11_I <dbl>, ZQ11_J <dbl>, ZQ11_K <dbl>,\n#   ZQ11_L <dbl>, ZQ11_M <dbl>, ZQ11_N <dbl>, ZQ11_O <dbl>, ZQ12 <dbl>,\n#   ZQ14_1A <dbl>, ZQ14_1B <dbl>, ZQ14_1C <dbl>, ZQ14_1D <dbl>, ZQ23A <dbl>,\n#   ZQ23B <dbl>, ZQ23C <dbl>, ZQ23D <dbl>, ZQ24 <dbl>, ZQ25 <dbl>, ZQ26A <dbl>,\n#   ZQ26B <dbl>, ZQ26C <dbl>, ZQ26D <dbl>, ZQ26E <dbl>, ZQ26F <dbl>, …\n\n# データのクラス\nclass(d_csv_2)\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\n\n\n\n\n\n# read_dtaでdtaデータを読み込む\nd_dta <- read_dta(\"data/raw/u001.dta\")\n# 確認\nhead(d_dta)\n\n# A tibble: 6 × 72\n  caseid sex     ybirth mbirth ZQ03    JC_1     JC_41    ZQ08A   ZQ08B   ZQ08C  \n   <dbl> <dbl+l>  <dbl>  <dbl> <dbl+l> <dbl+lb> <dbl+lb> <dbl+l> <dbl+l> <dbl+l>\n1  10001 1 [mal…   1976     10 1 [し…  2 [正… 12     … 4 [週… 1 [毎… 3 [週…\n2  10002 1 [mal…   1972      1 1 [し…  2 [正…  9     … 6 [ほ… 2 [週… 2 [週…\n3  10003 1 [mal…   1975      4 1 [し…  2 [正…  9     … 6 [ほ… 6 [ほ… 6 [ほ…\n4  10004 2 [fem…   1974     11 1 [し…  2 [正…  7     … 6 [ほ… 1 [毎… 1 [毎…\n5  10005 1 [mal…   1978      1 2 [し… 10 [無… 88 [非… 6 [ほ… 2 [週… 2 [週…\n6  10006 1 [mal…   1984      2 2 [し… 10 [無… 88 [非… 6 [ほ… 1 [毎… 2 [週…\n# ℹ 62 more variables: ZQ08D <dbl+lbl>, ZQ08E <dbl+lbl>, ZQ08F <dbl+lbl>,\n#   ZQ08G <dbl+lbl>, ZQ08H <dbl+lbl>, ZQ11_A <dbl+lbl>, ZQ11_B <dbl+lbl>,\n#   ZQ11_C <dbl+lbl>, ZQ11_D <dbl+lbl>, ZQ11_E <dbl+lbl>, ZQ11_F <dbl+lbl>,\n#   ZQ11_G <dbl+lbl>, ZQ11_H <dbl+lbl>, ZQ11_I <dbl+lbl>, ZQ11_J <dbl+lbl>,\n#   ZQ11_K <dbl+lbl>, ZQ11_L <dbl+lbl>, ZQ11_M <dbl+lbl>, ZQ11_N <dbl+lbl>,\n#   ZQ11_O <dbl+lbl>, ZQ12 <dbl+lbl>, ZQ14_1A <dbl+lbl>, ZQ14_1B <dbl+lbl>,\n#   ZQ14_1C <dbl+lbl>, ZQ14_1D <dbl+lbl>, ZQ23A <dbl+lbl>, ZQ23B <dbl+lbl>, …\n\n# データのクラス\nclass(d_dta)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n\n\n# read_savでsavデータを読み込む\nd_sav <- read_sav(\"data/raw/u001.sav\")\n# 確認\nhead(d_sav)\n\n# A tibble: 6 × 72\n  caseid sex     ybirth mbirth ZQ03    JC_1     JC_41    ZQ08A   ZQ08B   ZQ08C  \n   <dbl> <dbl+l>  <dbl>  <dbl> <dbl+l> <dbl+lb> <dbl+lb> <dbl+l> <dbl+l> <dbl+l>\n1  10001 1 [mal…   1976     10 1 [し…  2 [正… 12     … 4 [週… 1 [毎… 3 [週…\n2  10002 1 [mal…   1972      1 1 [し…  2 [正…  9     … 6 [ほ… 2 [週… 2 [週…\n3  10003 1 [mal…   1975      4 1 [し…  2 [正…  9     … 6 [ほ… 6 [ほ… 6 [ほ…\n4  10004 2 [fem…   1974     11 1 [し…  2 [正…  7     … 6 [ほ… 1 [毎… 1 [毎…\n5  10005 1 [mal…   1978      1 2 [し… 10 [無… 88 [非… 6 [ほ… 2 [週… 2 [週…\n6  10006 1 [mal…   1984      2 2 [し… 10 [無… 88 [非… 6 [ほ… 1 [毎… 2 [週…\n# ℹ 62 more variables: ZQ08D <dbl+lbl>, ZQ08E <dbl+lbl>, ZQ08F <dbl+lbl>,\n#   ZQ08G <dbl+lbl>, ZQ08H <dbl+lbl>, ZQ11_A <dbl+lbl>, ZQ11_B <dbl+lbl>,\n#   ZQ11_C <dbl+lbl>, ZQ11_D <dbl+lbl>, ZQ11_E <dbl+lbl>, ZQ11_F <dbl+lbl>,\n#   ZQ11_G <dbl+lbl>, ZQ11_H <dbl+lbl>, ZQ11_I <dbl+lbl>, ZQ11_J <dbl+lbl>,\n#   ZQ11_K <dbl+lbl>, ZQ11_L <dbl+lbl>, ZQ11_M <dbl+lbl>, ZQ11_N <dbl+lbl>,\n#   ZQ11_O <dbl+lbl>, ZQ12 <dbl+lbl>, ZQ14_1A <dbl+lbl>, ZQ14_1B <dbl+lbl>,\n#   ZQ14_1C <dbl+lbl>, ZQ14_1D <dbl+lbl>, ZQ23A <dbl+lbl>, ZQ23B <dbl+lbl>, …\n\n# データのクラス\nclass(d_sav)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\""
  },
  {
    "objectID": "1.intro.html",
    "href": "1.intro.html",
    "title": "",
    "section": "",
    "text": "まずはRStudio（あるいはRStudio Cloud）を起動すると Figure 1 のような画面が表示される．\n\n\n\nFigure 1: RStudioの画面\n\n\n画面には次の4つの領域（pane）がある．\n\n左上：Source pane．ここでスクリプト等を表示・編集する．ここにコードを入力する．\n左下：Console pane．Consoleの他，Terminal, Background Jobsのタブがある．コンソールには結果が表示される．\n右上：Environment pane．Environmentでは作成されたオブジェクトを確認できる．History，Connection，Built，Git，Tutorialなどのタブもある．\n右下：Output pane．ここにはファイル，図，パッケージ，ヘルプなどが表示される．\n\npaneについては一時的に縮小や拡大が可能であり，Figure 3 の赤で囲まれた枠でpaneの設定ができる．左上のEdit \\(\\rightarrow\\) Preferences… \\(\\rightarrow\\) Pane Layoutでも細かな設定が可能である．筆者は赤で囲まれた枠から「Console on Right」を選択し，右上にConsole paneが表示されるように設定している．\n\n\n\nFigure 2: 赤で囲まれた枠でPaneの設定\n\n\n\n\n\nコンソール上に Figure 3 のような四則演算を直接入力する．\n\n\n\nFigure 3: コンソールに直接入力する\n\n\nするとすぐ下に結果が表示されるはずである．\n簡単な計算はコンソール上で行ってもよいだろう．\n\n\n\n\n\n\n[1]は何？\n\n\n\n結果の左には常に[1]が表示されて気になるかもしれない．これは結果をベクトル（数字の列）で表示した時に，画面の一番左にある数字が何番目の要素であるかを示すものである．結果が1つしかない場合は，かならず1つ目の要素となるため[1]が表示される．\n\n\n\n\n\n\n\n\nESCを使う\n\n\n\n計算の途中で改行すると Figure 4 のようになる． この場合ESCキーを押すことで>の状態に戻すことができる． 何かのミスで結果が表示されない場合などは，ESCで元の状態に戻して再度コードを検討する．\n\n\n\nFigure 4: 計算の途中で改行した結果\n\n\n\n\n次は，Figure 5 の赤い四角の部分からソースにRスクリプトを作成する．\n\n\n\nFigure 5: ここからスクリプトを開く\n\n\nそして，Rスクリプト上に以下のコードを入力する．#（ハッシュ）はメモを作成するための記号であり，同じ行で#の後にくるものは実行されない．これをコメントアウトと呼ぶ．\n\n# 足し算\n1 + 1\n# 引き算\n2 - 100\n# 掛け算\n7 * 8\n# 割り算\n123456 / 3\n# 累乗\n2^3\n\nソースのタブでは，スクリプトは保存されていない状態だとUntitled1*のように表示されている．入力が終了したら名前をつけて保存する．ファイル名はdemo_1.Rのように拡張子.Rをつける．\n保存したら，タブのすぐ下の欄にある「Source」のすぐ右から「Source with Echo」を選択するか（Rスクリプトすべてを実行），実行したい行か範囲を選択して「Run」を選択すれば（選択した範囲を実行），コンソール上に次のような結果が表示される．一度「Source with Echo」を選択すれば，後は「Source」を選択すれば，すべてのRスクリプト上のすべてのコードが実行される．\nRスクリプトのいち部を実行したい場合は，「Ctrl」+「Enter」（「command + Enter」）でカーソルの置かれている行を実行（わざわざコードを全部選択する必要はない）．同様の方法ですべてのコードを実行したい場合は，「Ctrl」+「A」+「Enter」（「command」+「A」+「Enter」）とすればよい．\n\n# 足し算\n1 + 1\n\n[1] 2\n\n# 引き算\n2 - 100\n\n[1] -98\n\n# 掛け算\n7 * 8\n\n[1] 56\n\n# 割り算\n123456 / 3\n\n[1] 41152\n\n# 累乗\n2^3\n\n[1] 8\n\n\nコンソールに入力すると記録には残らないので，Rスクリプトに入力しそれを実行するようにする．実際のところ分析の結果自体は保存して記録に残す必要はないといってもよい．分析のプロセスがRスクリプトに残っていれば，結果を何度でも再現できる．\n\n\n\n\n\n\n#（ハッシュ）の使い方\n\n\n\n#でコメントをマメに残す癖をつけておこう．コードを書いているときは理解できていても，時間が空くと何をやっているかを忘れてしまうことがよくある．すぐに作業を開始するためにもメモは残しておこう．また，他人にコードをチェックしてもらう際にもメモは重要である．\n\n# 足し算\n1 + 2\n\n[1] 3\n\n1 + 2   # 足し算\n\n[1] 3\n\n# --------------------------\n# 2023年5月9日\n# --------------------------\n# Rの基礎\n\n# 足し算\n1 + 2\n\n[1] 3\n\n\n\n\nでは今度は関数（function）を使用してみる．関数は関数名()といった形となり，()の中に引数（argument）を指定する．引数は数値であったり，ベクトルであったり，データであったり，TRUEやFALSEやであったり，NULLであったり，文字であったりする．\n\n# 平方根\nsqrt(8)\n\n[1] 2.828427\n\n# 底が2の対数\nlog2(8)\n\n[1] 3\n\n# 底が2の対数 log()関数の引数にbase = 2 を加える\nlog(8, base = 2)\n\n[1] 3\n\n# 自然対数 log関数のデフォルトのbase = exp(1)\nlog(8)\n\n[1] 2.079442\n\n# 指数関数\nexp(8)\n\n[1] 2980.958\n\n\n\n\n\n\n\n\n引数の指定\n\n\n\nsqrt(x = 8)のようにするのが正しいのかもしれないが，第1引数についてはsqrt(8)と省略されることが多い．log(8, base = 2)はlog(8, 2)としてもよいが，分かりにくいかもしれない．\n\n\n\n\n\n\n\n\n数学の復習\n\n\n\n累乗 (\\(a^x\\))，平方根 (\\(\\sqrt{x}\\))，自然対数 (\\(\\log_e x\\))，指数関数(\\(e^x\\))，\\(e\\)はネイピア数であり， \\(e=2.718...\\)．\n\n\n\n\n\n社会調査データの分析では，人々によって異なる変数の分布（たとえば中心的な傾向やばらつきの程度）や変数間の関連を分析する．その時，変数は数値の列（ベクトル）として管理され，これを引数として関数で処理を行う．複数の数値を並べるためにはc（combineの略）を用い，カンマ,でつなぐ．\n次のような4つのケースのある変数を考える．\n\\[\\{1,2,2,3\\}\\]\nRでは次のように示される．\n\n# ベクトル\nc(1,2,2,3)\n\n[1] 1 2 2 3\n\n\n次のような変数の値は実際の調査で得られることはないが，IDとして使用できるだろう．\n\\[\\{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\\}\\]\n\n# 連続した値\n1:18\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18\n\n\n以下のような規則的な数字の列であった場合は，様々な関数を使用できる．\n\\[\\{0,2,4,6,8,10\\}\\]\n\n# 等差数列\nseq(0,10,2) # 0から10まで2つずつ増加\n\n[1]  0  2  4  6  8 10\n\n\n\\[\\{1,1,1,1,1,1,1,1,1,1\\}\\]\n\n# 繰り返し\nrep(1,10) # 1を10個\n\n [1] 1 1 1 1 1 1 1 1 1 1\n\n\n\n\n\n\n\n\n関数のヘルプ\n\n\n\n関数名は分かるがどのように引数を指定してよいかわからない場合やさらに何ができるのかを確認したい場合は，ヘルプを見てみよう． 例えば平均のmean()関数であれば?meanとする．また%in%のように特殊な表記については?\"%in%\"のように\"で囲んだ上で?をつける．[]について調べたければ?\"[\"のようにする．\"は`でもよい．つまり，?`[`としてもよい．\n単語をもとになにか調べたければhelp.search(\"mean\")のようにする． 他にもRjpWiki，個人のサイトなど，日本語や英語で検索すると多くヒットする．教科書の索引で調べるのもよいだろう．\n\n\n\n\n\n値，データ，ベクトル，コメントなど様々なものをオブジェクトに代入できる．次のようにaというオブジェクトに4という値を代入してみる．\n\n# aというオブジェクトに4を代入\na <- 4\n\n代入するだけでは何もでてこないので，aと入力して実行してみる．\n\n# 結果を表示\na\n\n[1] 4\n\n\nすると先程代入された値が表示される．\nでは次に\\(\\{1,2,3,4,5,5\\}\\)というベクトルを代入してみる．\n\n# bというオブジェクトに [1,2,3,4,5,5] というベクトルを代入\nb <- c(1,2,3,4,5,5)\n# 結果を表示\nb\n\n[1] 1 2 3 4 5 5\n\n\nなおc，q，tは関数として，piははじめから組み込まれている定数として頻繁に使用されるためオブジェクトとしては使用しない．TRUEとFALSEの省略であるTとFも使用しないほうがよいだろう．C，D，Iも避けよう．\n\n# piは3.141593\npi\n\n[1] 3.141593\n\n\nこのようなベクトルをオブジェクトとし，それに対して関数を適用する．\n\n\n\n平均50，標準偏差10の正規分布からランダムに100個のデータを取り出し，架空のデータを作成する． データはrnorm()関数にn = 100，mean = 50，sd = 10を指定することで作成できる． そのデータについてはxというオブジェクトに代入しておく．\n\n# 平均50，標準偏差10の正規分布からランダムに100個のデータを取り出す\n# 再現のため乱数を指定\nset.seed(123456)\nx <- rnorm(n = 100, mean = 50, sd = 10)\nx\n\n  [1] 58.33733 47.23952 46.44998 50.87487 72.52256 58.34460 63.12416 75.02645\n  [9] 61.68232 45.73834 40.03870 38.86050 49.44268 61.74432 60.53219 50.57606\n [17] 42.64957 59.30528 66.68211 55.59688 42.46025 62.56554 50.38493 51.89540\n [25] 54.62595 45.72637 50.16586 57.04879 59.71849 43.79508 41.44133 50.69558\n [33] 39.53802 22.51132 38.70140 41.38315 65.60074 60.15088 60.43994 38.84095\n [41] 39.28696 59.67821 51.71033 41.03750 51.58289 44.98052 40.34077 48.86266\n [49] 60.85950 37.88352 32.32278 45.08308 53.21466 64.60661 65.37243 46.60431\n [57] 39.22551 35.09235 47.47253 48.78077 43.51017 53.13076 51.22811 41.63160\n [65] 56.00422 47.54065 48.15335 50.23157 45.15348 42.62094 63.02508 55.64499\n [73] 31.94956 54.38339 35.58911 59.52829 42.77018 50.48760 34.36468 26.97634\n [81] 61.57964 42.95265 34.26178 55.18352 39.35069 50.47054 58.48047 54.32678\n [89] 55.22805 47.46114 45.03148 62.60101 55.64980 46.55362 57.24810 58.64092\n [97] 53.69247 65.83596 50.60370 51.28711\n\n\n図も関数を用いることで描くことができる．hist()関数はヒストグラムを作成する．\n\n# ヒストグラム\nhist(x)\n\n\n\n\n次のように様々な関数を利用して，値を計算してみる．\n\\[\n\\sum_{i=1}^n x.\n\\]\n\n# 総和\nsum(x)\n\n[1] 5016.82\n\n\n\\[\n\\bar x = \\frac{1}{n}\\sum_{i=1}^n x.\n\\]\n\n# 平均値\nmean(x)\n\n[1] 50.1682\n\n\n値を丸めたければround()関数を使用する．小数点以下の桁数はdigitsで指定できる．まず，平均値を求めmean_xというオブジェクトに代入する．それにround()関数を適用する．\n\n# 平均値を求めmean_xというオブジェクトに代入する\nmean_x <- mean(x)\n# mean_xというオブジェクトに対してround()関数を適用する．\nround(mean_x, digits = 1)\n\n[1] 50.2\n\n\nmean_xを使用せず，次のようにしてもよい．\n\n# まとめて実行する\nround(mean(x), digits = 1)\n\n[1] 50.2\n\n\nただし計算のプロセスが見えにくいかもしれないので，後に説明するパイプ演算子を利用することが推奨される．\n\n中央値\n\n\n# 中央値\nmedian(x)\n\n[1] 50.47907\n\n\n\n不偏分散\n\n\\[\n\\frac{1}{n-1}\\sum_{i=1}^n \\left(x - \\bar x \\right).\n\\]\n\n# 不偏分散\nvar(x)\n\n[1] 98.70409\n\n\n\n標準偏差\n\n\\[\n\\sqrt{\\frac{1}{n-1}\\sum_{i=1}^n \\left(x - \\bar x \\right)}.\n\\]\n\n# 標準偏差\nsd(x)\n\n[1] 9.934993\n\n\n\n最大値と最小値\n\n\n# 最大値\nmax(x)\n\n[1] 75.02645\n\n# 最小値\nmin(x)\n\n[1] 22.51132\n\n\n\nサンプルサイズ\n\n\n# 大きさ\nlength(x)\n\n[1] 100\n\n\n\n\n\n\n\n\nlength()関数についての注意点\n\n\n\n欠損値がある場合には，観察されたケースのサイズをlength()関数を用いて示してはいけない．もし欠損値のないケースのサイズについて知りたければsum(!is.na(x))とする．使用頻度が多い場合には，次のようにcomplete_obs()関数を作成するのがよい．\n\n# xをコピー\nx_mis <- x\n# 10から20番目の要素をNAとする\nx_mis[10:20] <- NA\n# 欠損を含むデータの表示\nx_mis\n\n  [1] 58.33733 47.23952 46.44998 50.87487 72.52256 58.34460 63.12416 75.02645\n  [9] 61.68232       NA       NA       NA       NA       NA       NA       NA\n [17]       NA       NA       NA       NA 42.46025 62.56554 50.38493 51.89540\n [25] 54.62595 45.72637 50.16586 57.04879 59.71849 43.79508 41.44133 50.69558\n [33] 39.53802 22.51132 38.70140 41.38315 65.60074 60.15088 60.43994 38.84095\n [41] 39.28696 59.67821 51.71033 41.03750 51.58289 44.98052 40.34077 48.86266\n [49] 60.85950 37.88352 32.32278 45.08308 53.21466 64.60661 65.37243 46.60431\n [57] 39.22551 35.09235 47.47253 48.78077 43.51017 53.13076 51.22811 41.63160\n [65] 56.00422 47.54065 48.15335 50.23157 45.15348 42.62094 63.02508 55.64499\n [73] 31.94956 54.38339 35.58911 59.52829 42.77018 50.48760 34.36468 26.97634\n [81] 61.57964 42.95265 34.26178 55.18352 39.35069 50.47054 58.48047 54.32678\n [89] 55.22805 47.46114 45.03148 62.60101 55.64980 46.55362 57.24810 58.64092\n [97] 53.69247 65.83596 50.60370 51.28711\n\n# 欠損値を含むサイズ\nlength(x_mis)\n\n[1] 100\n\n# 欠損値を除いたサイズ\nsum(!is.na(x_mis))\n\n[1] 89\n\n# 欠損値をた観察ケースサイズを求める関数を作成する\ncomplete_obs <- function(x) sum(!is.na(x))\ncomplete_obs(x)\n\n[1] 100\n\n\nlength()関数を使用する際は注意しよう．データフレームの行のサイズをnrow()関数で求め，それをサンプルサイズとして用いることもあるが，これも欠損値については考慮していないことに注意が必要である．\n\n\n\n四分位数\n\n\n# 四分位数\nquantile(x)\n\n      0%      25%      50%      75%     100% \n22.51132 42.74002 50.47907 58.33915 75.02645 \n\n\n\n要約 summary()関数を数値に適用すると，平均と四分位数を同時に示す．\n\n\n# 要約\nsummary(x)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  22.51   42.74   50.48   50.17   58.34   75.03 \n\n\n\n\n\n\n\n\n注意点\n\n\n\nvarとsdは \\(n\\) ではなく \\(n-1\\) で割ったものであることに注意．\n\n\n\n\n\nRでは分析などの機能をひとつのパッケージとしてまとめている．RStudioの右下のOutput paneの「Packages」のタブからパッケージはインストール可能である．またはinstall.packages(\"パッケージ名\") と入力しても良い．install.packages(\"パッケージ名\", dependencies = TRUE)のようにdependencies = TRUEはつけておいたほうがよい．\n\n# 以下をコンソールに貼り付ければ，インストールされる（ただし時間がかかる）\ninstall.packages(\"tidyverse\", dependencies = TRUE)  # データの整理\ninstall.packages(\"haven\", dependencies = TRUE)  # データの読み込み\ninstall.packages(\"janitor\", dependencies = TRUE)  # データの変換\n\nこれまでの作業はインストールだけであり，そのままではパッケージの関数などは利用できない．パッケージを使用したい場合はlibrary(パッケージ名)で呼び出す必要がある．これはRStudioを閉じて再度立ち上げたら必要な作業なので，スクリプトに書いておく．\n\nlibrary(tidyverse)  # データの整理\nlibrary(haven)  # データの読み込み\nlibrary(janitor)  # 度数分布表\n\nなおインストールされているパッケージについてはOutput paneの「Packages」のタブか .packages(all.available=TRUE)と入力することで確認できる．\n以上の作業をまとめて行いたい場合，pacmanパッケージのp_load()関数を用いる．\n\n# pacmanパッケージがインストールされていない場合は以下からインストールを実行\n#install.packages(\"pacman\")\n# パッケージのインストール（もしインストールされていなければ）と呼び出し\npacman::p_load(tidyverse,\n               haven,\n               janitor)\n\n\n\n\n\n\n\nパッケージ名::関数名\n\n\n\n複数のパッケージで同じ関数名を使用することがある．そのため，意図しているパッケージの関数とは異なるを用いてしまったり，\n\n\n\n\n\n通常は関数(引数)として入力されるが，パイプ処理では引数 |> 関数()のようにパイプの左側の結果をパイプ右側に配置した関数の最初の引数（第1引数）に適用できる． 更に|>を複数つなげてデータ |> 関数() |> 関数() のようにできるため，どのような処理を行ったかが分かりやすい形でコードが整理される．\n\n# 総和\nx |> sum()\n\n[1] 5016.82\n\n# 平均値\nx |> mean()\n\n[1] 50.1682\n\n# 平均値を丸める\nx |> mean() |> round(digits = 1)\n\n[1] 50.2\n\n# 中央値\nx |> median()\n\n[1] 50.47907\n\n# 不偏分散\nx |> var()\n\n[1] 98.70409\n\n# 標準偏差\nx |> sd()\n\n[1] 9.934993\n\n# 最大値\nx |> max()\n\n[1] 75.02645\n\n# 最小値\nx |> min()\n\n[1] 22.51132\n\n# 大きさ\nx |> length()\n\n[1] 100\n\n# 四分位数\nx |> quantile()\n\n      0%      25%      50%      75%     100% \n22.51132 42.74002 50.47907 58.33915 75.02645 \n\n# 要約\nx |> summary()\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  22.51   42.74   50.48   50.17   58.34   75.03 \n\n\n\n\n\n\n\n\n2つのパイプ演算子\n\n\n\nパイプ演算子はもともとmagrittrパッケージの%>%という演算子のことを示していた．しかし，R4.1+では|>が標準で組み込まれている（ネイティブパイプと呼ばれる）．したがって|>を使用するのにmagrittrパッケージを呼び出す必要はない．実際は%>%のほうが分かりやすく，使用しやすい場面もある．なお，パイプ演算子のショートカットキーは \\(\\uparrow\\) +「Command」+「m」である．\n\nlibrary(magrittr)\n\n\nAttaching package: 'magrittr'\n\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\nx %>% mean()\n\n[1] 50.1682\n\nx |> mean()\n\n[1] 50.1682\n\n\n\n\n\n\n\nデータ，スクリプト，作成した図表，先行研究，資料，執筆した論文などをひとつのフォルダの中にまとめておこう．このようなあるプロジェクトに関連するファイルが含まれたフォルダを作業ディレクトリ（Working Directory）と呼ぶ．例えばここではR4SSという名前のフォルダを作成する．中身はひとまずはからのままでもよい．\nR4SSというフォルダを作成しても，RにはR4SSフォルダは作業ディレクトリとしては認識していない．\n「Session」\\(\\rightarrow\\)「Set Working Directory」\\(\\rightarrow\\)「Choose Directory…」を選択し，R4SSフォルダを探して選択し，「Open」を選択することによって， R4SSが作業ディレクトリとしては認識される．\n\n\n\n作業ディレクトリの変更方法\n\n\n以下のコードを入力し，指定したフォルダが作業ディレクトリとして認識されているかどうかを確認してみよう．\n\n\n\n作業ディレクトリの確認方法\n\n\n\ngetwd()\n\n[1] \"/Users/sf/GitHub/R4SS\"\n\n\n基本的にはRStudioを起動するたびに作業ディレクトリを指定する必要がある． しかし，以下で説明するプロジェクトを指定する作業を一度行ってしまえば，その作業の必要はない．\n\n\n\nFigure 6 のように左上のアイコンからプロジェクトを作成しよう．すでにR4SSという名前のフォルダを作成されているという前提で手順を説明する．\n\n\n\nFigure 6: プロジェクトを作成する\n\n\nFigure 7 のように，新規でディレクトリ（New Directory）を作成するのか，すでにあるディレクトリ（Existing Directory）を使うのかをたずねられるので，ここではすでにあるディレクトリを使用する．「Browse」を選択し，作業ディレクトリを選択したら「Open」を選択する．「Projecto working directory:」の欄にパスが記入された状態になるので，「Create Project」を選択する．\n\n\n\nFigure 7: 新規にフォルダを作成するか既存のフォルダを利用するのかを選択する\n\n\nすると，R4SSというフォルダの中にR4SS.Rprojというファイルが作成される．このように，プロジェクトファイル（R4SS.Rprojのように.Rprojという拡張子のファイル）を作業ディレクトリに作成しておけば，.Rprojファイルをクリックすると自動的にファイルのある場所が作業ディレクトリとして指定される．確認の方法は複数ある．\n\nConsoleペインのタブのすぐ下に作業ディレクトリが表示されているか．\nFilesペインの右側のプロジェクトのアイコンをクリックすると作業ディレクトリの中身がFilesの中に表示されているか．\ngetwd()関数を実行する．\nhereパッケージのhere()関数を用いる．\n\n\n# 作業ディレクトリの確認\ngetwd()\n\n[1] \"/Users/sf/GitHub/R4SS\"\n\n\nhereパッケージのhere()関数を用いることで，作業ディレクトリの仲間で確認できる．\n\n# 作業ディレクトリの確認\nhere::here()\n\n[1] \"/Users/sf/GitHub/R4SS\"\n\n# 作業ディレクトリの中のdataフォルダ\nhere::here(\"data\")\n\n[1] \"/Users/sf/GitHub/R4SS/data\"\n\n#作業ディレクトリの中のdataフォルダのcsvファイル\nhere::here(\"data\", \"u001.csv\")\n\n[1] \"/Users/sf/GitHub/R4SS/data/u001.csv\"\n\n\n\n\n\n\nhere::here(\"data\")\n\n[1] \"/Users/sf/GitHub/R4SS/data\"\n\n\n\n\n\n\nスクリプト（.Rとなっているテキストのファイル）のみを保存して終了すればよい．\n個人的には作業スペースの保存は必要ないと考えるので，Save Workspace…などとたずねられても，Noとする．"
  },
  {
    "objectID": "99.tips.html",
    "href": "99.tips.html",
    "title": "",
    "section": "",
    "text": "便利だが普段はあまりつかわないため忘れがちな点についてメモしておく．\n\n\nmean()関数がどのようにして作成されているのかを確認したい場合，meanのように()をとって入力すればよい．しかし，UseMethod(\"mean\")のように関数が表示され，中身を確認できない場合もある．\n\nmean\n\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x11c825ce8>\n<environment: namespace:base>\n\n\nこのような場合は，methods()関数を用いるとよい\n\nmethods(mean)\n\n[1] mean.Date*     mean.default*  mean.difftime* mean.POSIXct*  mean.POSIXlt* \n[6] mean.quosure* \nsee '?methods' for accessing help and source code\n\n\n．様々な結果が示されるがここでは，2めの要素にあるmean.default*を確認しよう．*をとってmean.defaultと入力するだけでよい．\n\nmean.default\n\nfunction (x, trim = 0, na.rm = FALSE, ...) \n{\n    if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) {\n        warning(\"argument is not numeric or logical: returning NA\")\n        return(NA_real_)\n    }\n    if (isTRUE(na.rm)) \n        x <- x[!is.na(x)]\n    if (!is.numeric(trim) || length(trim) != 1L) \n        stop(\"'trim' must be numeric of length one\")\n    n <- length(x)\n    if (trim > 0 && n) {\n        if (is.complex(x)) \n            stop(\"trimmed means are not defined for complex data\")\n        if (anyNA(x)) \n            return(NA_real_)\n        if (trim >= 0.5) \n            return(stats::median(x, na.rm = FALSE))\n        lo <- floor(n * trim) + 1\n        hi <- n + 1 - lo\n        x <- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]\n    }\n    .Internal(mean(x))\n}\n<bytecode: 0x10dbf54a0>\n<environment: namespace:base>"
  }
]